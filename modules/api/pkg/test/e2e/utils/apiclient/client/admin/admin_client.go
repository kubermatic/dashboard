// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new admin API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for admin API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMeteringReportConfiguration(params *CreateMeteringReportConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMeteringReportConfigurationCreated, error)

	CreateOrUpdateMeteringConfigurations(params *CreateOrUpdateMeteringConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrUpdateMeteringConfigurationsOK, error)

	CreateOrUpdateMeteringCredentials(params *CreateOrUpdateMeteringCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrUpdateMeteringCredentialsOK, error)

	CreatePolicyBinding(params *CreatePolicyBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePolicyBindingOK, error)

	CreatePolicyTemplate(params *CreatePolicyTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePolicyTemplateOK, error)

	CreateSeed(params *CreateSeedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSeedOK, error)

	DeleteAdmissionPlugin(params *DeleteAdmissionPluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAdmissionPluginOK, error)

	DeleteBackupDestination(params *DeleteBackupDestinationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBackupDestinationOK, error)

	DeleteMeteringReportConfiguration(params *DeleteMeteringReportConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMeteringReportConfigurationOK, error)

	DeletePolicyBinding(params *DeletePolicyBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePolicyBindingOK, error)

	DeletePolicyTemplate(params *DeletePolicyTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePolicyTemplateOK, error)

	DeleteSeed(params *DeleteSeedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSeedOK, error)

	GetAdmins(params *GetAdminsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdminsOK, error)

	GetAdmissionPlugin(params *GetAdmissionPluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdmissionPluginOK, error)

	GetKubermaticCustomLinks(params *GetKubermaticCustomLinksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubermaticCustomLinksOK, error)

	GetKubermaticSettings(params *GetKubermaticSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubermaticSettingsOK, error)

	GetMeteringReportConfiguration(params *GetMeteringReportConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMeteringReportConfigurationOK, error)

	GetPolicyBinding(params *GetPolicyBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyBindingOK, error)

	GetPolicyTemplate(params *GetPolicyTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyTemplateOK, error)

	GetSeed(params *GetSeedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSeedOK, error)

	ListAdmissionPlugins(params *ListAdmissionPluginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAdmissionPluginsOK, error)

	ListMeteringReportConfigurations(params *ListMeteringReportConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMeteringReportConfigurationsOK, error)

	ListPolicyBinding(params *ListPolicyBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPolicyBindingOK, error)

	ListPolicyTemplate(params *ListPolicyTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPolicyTemplateOK, error)

	ListSeeds(params *ListSeedsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSeedsOK, error)

	PatchKubermaticSettings(params *PatchKubermaticSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchKubermaticSettingsOK, error)

	PatchPolicyBinding(params *PatchPolicyBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchPolicyBindingOK, error)

	PatchpolicyTemplate(params *PatchpolicyTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchpolicyTemplateOK, error)

	SetAdmin(params *SetAdminParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAdminOK, error)

	UpdateAdmissionPlugin(params *UpdateAdmissionPluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAdmissionPluginOK, error)

	UpdateMeteringReportConfiguration(params *UpdateMeteringReportConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMeteringReportConfigurationOK, error)

	UpdateSeed(params *UpdateSeedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSeedOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMeteringReportConfiguration Creates report configuration for KKP metering tool. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) CreateMeteringReportConfiguration(params *CreateMeteringReportConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMeteringReportConfigurationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMeteringReportConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMeteringReportConfiguration",
		Method:             "POST",
		PathPattern:        "/api/v1/admin/metering/configurations/reports/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMeteringReportConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMeteringReportConfigurationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMeteringReportConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateOrUpdateMeteringConfigurations Configures KKP metering tool. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) CreateOrUpdateMeteringConfigurations(params *CreateOrUpdateMeteringConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrUpdateMeteringConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrUpdateMeteringConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrUpdateMeteringConfigurations",
		Method:             "PUT",
		PathPattern:        "/api/v1/admin/metering/configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrUpdateMeteringConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrUpdateMeteringConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOrUpdateMeteringConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateOrUpdateMeteringCredentials Creates or updates the metering tool credentials. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) CreateOrUpdateMeteringCredentials(params *CreateOrUpdateMeteringCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrUpdateMeteringCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrUpdateMeteringCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrUpdateMeteringCredentials",
		Method:             "PUT",
		PathPattern:        "/api/v1/admin/metering/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrUpdateMeteringCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrUpdateMeteringCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOrUpdateMeteringCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreatePolicyBinding Create policy binding, Only available in Kubermatic Enterprise Edition
*/
func (a *Client) CreatePolicyBinding(params *CreatePolicyBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePolicyBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePolicyBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPolicyBinding",
		Method:             "POST",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePolicyBindingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePolicyBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreatePolicyBindingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreatePolicyTemplate Create policy template. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) CreatePolicyTemplate(params *CreatePolicyTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePolicyTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePolicyTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPolicyTemplate",
		Method:             "POST",
		PathPattern:        "/api/v2/policytemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePolicyTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePolicyTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreatePolicyTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateSeed creates a new seed object
*/
func (a *Client) CreateSeed(params *CreateSeedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSeedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSeed",
		Method:             "POST",
		PathPattern:        "/api/v1/admin/seeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSeedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSeedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSeedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAdmissionPlugin deletes the admission plugin
*/
func (a *Client) DeleteAdmissionPlugin(params *DeleteAdmissionPluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAdmissionPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAdmissionPluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAdmissionPlugin",
		Method:             "DELETE",
		PathPattern:        "/api/v1/admin/admission/plugins/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAdmissionPluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAdmissionPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAdmissionPluginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteBackupDestination deletes a backup destination from the seed
*/
func (a *Client) DeleteBackupDestination(params *DeleteBackupDestinationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBackupDestinationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBackupDestinationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBackupDestination",
		Method:             "DELETE",
		PathPattern:        "/api/v1/admin/seeds/{seed_name}/backupdestinations/{backup_destination}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBackupDestinationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBackupDestinationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteBackupDestinationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMeteringReportConfiguration Removes report configuration for KKP metering tool. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) DeleteMeteringReportConfiguration(params *DeleteMeteringReportConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMeteringReportConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeteringReportConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMeteringReportConfiguration",
		Method:             "DELETE",
		PathPattern:        "/api/v1/admin/metering/configurations/reports/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeteringReportConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMeteringReportConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMeteringReportConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeletePolicyBinding Delete policy binding, If query parameter `project_id` is set then the endpoint will delete only the policy binding that are associated with the project. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) DeletePolicyBinding(params *DeletePolicyBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePolicyBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePolicyBinding",
		Method:             "DELETE",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings/{binding_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePolicyBindingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePolicyBindingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeletePolicyTemplate Delete policy template, If the query parameter project_id is set, the endpoint will delete the policy template if it is associated with the specified project_id. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) DeletePolicyTemplate(params *DeletePolicyTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePolicyTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePolicyTemplate",
		Method:             "DELETE",
		PathPattern:        "/api/v2/policytemplates/{template_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePolicyTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePolicyTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteSeed deletes the seed c r d object from the kubermatic
*/
func (a *Client) DeleteSeed(params *DeleteSeedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSeedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSeed",
		Method:             "DELETE",
		PathPattern:        "/api/v1/admin/seeds/{seed_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSeedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSeedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSeedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAdmins returns list of admin users
*/
func (a *Client) GetAdmins(params *GetAdminsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdminsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdminsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAdmins",
		Method:             "GET",
		PathPattern:        "/api/v1/admin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdminsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdminsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAdminsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAdmissionPlugin gets the admission plugin
*/
func (a *Client) GetAdmissionPlugin(params *GetAdmissionPluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdmissionPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdmissionPluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAdmissionPlugin",
		Method:             "GET",
		PathPattern:        "/api/v1/admin/admission/plugins/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdmissionPluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdmissionPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAdmissionPluginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetKubermaticCustomLinks gets the custom links
*/
func (a *Client) GetKubermaticCustomLinks(params *GetKubermaticCustomLinksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubermaticCustomLinksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubermaticCustomLinksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubermaticCustomLinks",
		Method:             "GET",
		PathPattern:        "/api/v1/admin/settings/customlinks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKubermaticCustomLinksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubermaticCustomLinksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKubermaticCustomLinksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetKubermaticSettings gets the global settings
*/
func (a *Client) GetKubermaticSettings(params *GetKubermaticSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKubermaticSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubermaticSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubermaticSettings",
		Method:             "GET",
		PathPattern:        "/api/v1/admin/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKubermaticSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubermaticSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKubermaticSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMeteringReportConfiguration Gets report configuration for KKP metering tool. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) GetMeteringReportConfiguration(params *GetMeteringReportConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMeteringReportConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeteringReportConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMeteringReportConfiguration",
		Method:             "GET",
		PathPattern:        "/api/v1/admin/metering/configurations/reports/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeteringReportConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMeteringReportConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMeteringReportConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPolicyBinding Get policy binding, If query parameter `project_id` is set then the endpoint will return only the policy binding that are associated with the project. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) GetPolicyBinding(params *GetPolicyBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicyBinding",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings/{binding_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPolicyBindingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPolicyBindingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPolicyTemplate Get policy template, If the query parameter project_id is set, the endpoint will return the policy template if it is associated with the specified project_id. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) GetPolicyTemplate(params *GetPolicyTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicyTemplate",
		Method:             "GET",
		PathPattern:        "/api/v2/policytemplates/{template_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPolicyTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPolicyTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSeed returns the seed object
*/
func (a *Client) GetSeed(params *GetSeedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSeed",
		Method:             "GET",
		PathPattern:        "/api/v1/admin/seeds/{seed_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSeedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSeedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSeedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListAdmissionPlugins returns all admission plugins from the c r ds
*/
func (a *Client) ListAdmissionPlugins(params *ListAdmissionPluginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAdmissionPluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAdmissionPluginsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAdmissionPlugins",
		Method:             "GET",
		PathPattern:        "/api/v1/admin/admission/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAdmissionPluginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAdmissionPluginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListAdmissionPluginsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListMeteringReportConfigurations Lists report configurations for KKP metering tool. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) ListMeteringReportConfigurations(params *ListMeteringReportConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMeteringReportConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMeteringReportConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMeteringReportConfigurations",
		Method:             "GET",
		PathPattern:        "/api/v1/admin/metering/configurations/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMeteringReportConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMeteringReportConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMeteringReportConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListPolicyBinding List all policy bindings, If query parameter `project_id` is set then the endpoint will return only the policy bindings that are associated with the project. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) ListPolicyBinding(params *ListPolicyBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPolicyBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPolicyBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPolicyBinding",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListPolicyBindingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPolicyBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPolicyBindingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListPolicyTemplate List all policy templates, If query parameter `project_id` is set then the endpoint will return only the policy templates that are associated with the project. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) ListPolicyTemplate(params *ListPolicyTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPolicyTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPolicyTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPolicyTemplate",
		Method:             "GET",
		PathPattern:        "/api/v2/policytemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListPolicyTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPolicyTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListPolicyTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListSeeds returns all seeds from the c r ds
*/
func (a *Client) ListSeeds(params *ListSeedsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSeedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSeedsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSeeds",
		Method:             "GET",
		PathPattern:        "/api/v1/admin/seeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSeedsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSeedsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSeedsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchKubermaticSettings patches the global settings
*/
func (a *Client) PatchKubermaticSettings(params *PatchKubermaticSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchKubermaticSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchKubermaticSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchKubermaticSettings",
		Method:             "PATCH",
		PathPattern:        "/api/v1/admin/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchKubermaticSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchKubermaticSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchKubermaticSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchPolicyBinding Patch policy binding. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) PatchPolicyBinding(params *PatchPolicyBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchPolicyBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPolicyBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchPolicyBinding",
		Method:             "PATCH",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings/{binding_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPolicyBindingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchPolicyBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchPolicyBindingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchpolicyTemplate Patch policy template. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) PatchpolicyTemplate(params *PatchpolicyTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchpolicyTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchpolicyTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchpolicyTemplate",
		Method:             "PATCH",
		PathPattern:        "/api/v2/policytemplates/{template_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchpolicyTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchpolicyTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchpolicyTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetAdmin allows setting and clearing admin role for users
*/
func (a *Client) SetAdmin(params *SetAdminParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAdminParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAdmin",
		Method:             "PUT",
		PathPattern:        "/api/v1/admin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAdminOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetAdminDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAdmissionPlugin updates the admission plugin
*/
func (a *Client) UpdateAdmissionPlugin(params *UpdateAdmissionPluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAdmissionPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAdmissionPluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAdmissionPlugin",
		Method:             "PATCH",
		PathPattern:        "/api/v1/admin/admission/plugins/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAdmissionPluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAdmissionPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAdmissionPluginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateMeteringReportConfiguration Updates existing report configuration for KKP metering tool. Only available in Kubermatic Enterprise Edition
*/
func (a *Client) UpdateMeteringReportConfiguration(params *UpdateMeteringReportConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMeteringReportConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMeteringReportConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMeteringReportConfiguration",
		Method:             "PUT",
		PathPattern:        "/api/v1/admin/metering/configurations/reports/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMeteringReportConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMeteringReportConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateMeteringReportConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateSeed updates the seed
*/
func (a *Client) UpdateSeed(params *UpdateSeedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSeedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSeed",
		Method:             "PATCH",
		PathPattern:        "/api/v1/admin/seeds/{seed_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSeedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSeedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSeedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
