// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"k8c.io/dashboard/v2/pkg/test/e2e/utils/apiclient/models"
)

// PatchPolicyBindingReader is a Reader for the PatchPolicyBinding structure.
type PatchPolicyBindingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchPolicyBindingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchPolicyBindingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchPolicyBindingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchPolicyBindingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchPolicyBindingDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchPolicyBindingOK creates a PatchPolicyBindingOK with default headers values
func NewPatchPolicyBindingOK() *PatchPolicyBindingOK {
	return &PatchPolicyBindingOK{}
}

/*
PatchPolicyBindingOK describes a response with status code 200, with default header values.

PolicyBinding
*/
type PatchPolicyBindingOK struct {
	Payload *models.PolicyBinding
}

// IsSuccess returns true when this patch policy binding o k response has a 2xx status code
func (o *PatchPolicyBindingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch policy binding o k response has a 3xx status code
func (o *PatchPolicyBindingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch policy binding o k response has a 4xx status code
func (o *PatchPolicyBindingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch policy binding o k response has a 5xx status code
func (o *PatchPolicyBindingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch policy binding o k response a status code equal to that given
func (o *PatchPolicyBindingOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchPolicyBindingOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings/{binding_name}][%d] patchPolicyBindingOK  %+v", 200, o.Payload)
}

func (o *PatchPolicyBindingOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings/{binding_name}][%d] patchPolicyBindingOK  %+v", 200, o.Payload)
}

func (o *PatchPolicyBindingOK) GetPayload() *models.PolicyBinding {
	return o.Payload
}

func (o *PatchPolicyBindingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PolicyBinding)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPolicyBindingUnauthorized creates a PatchPolicyBindingUnauthorized with default headers values
func NewPatchPolicyBindingUnauthorized() *PatchPolicyBindingUnauthorized {
	return &PatchPolicyBindingUnauthorized{}
}

/*
PatchPolicyBindingUnauthorized describes a response with status code 401, with default header values.

EmptyResponse is a empty response
*/
type PatchPolicyBindingUnauthorized struct {
}

// IsSuccess returns true when this patch policy binding unauthorized response has a 2xx status code
func (o *PatchPolicyBindingUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch policy binding unauthorized response has a 3xx status code
func (o *PatchPolicyBindingUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch policy binding unauthorized response has a 4xx status code
func (o *PatchPolicyBindingUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch policy binding unauthorized response has a 5xx status code
func (o *PatchPolicyBindingUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch policy binding unauthorized response a status code equal to that given
func (o *PatchPolicyBindingUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchPolicyBindingUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings/{binding_name}][%d] patchPolicyBindingUnauthorized ", 401)
}

func (o *PatchPolicyBindingUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings/{binding_name}][%d] patchPolicyBindingUnauthorized ", 401)
}

func (o *PatchPolicyBindingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchPolicyBindingForbidden creates a PatchPolicyBindingForbidden with default headers values
func NewPatchPolicyBindingForbidden() *PatchPolicyBindingForbidden {
	return &PatchPolicyBindingForbidden{}
}

/*
PatchPolicyBindingForbidden describes a response with status code 403, with default header values.

EmptyResponse is a empty response
*/
type PatchPolicyBindingForbidden struct {
}

// IsSuccess returns true when this patch policy binding forbidden response has a 2xx status code
func (o *PatchPolicyBindingForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch policy binding forbidden response has a 3xx status code
func (o *PatchPolicyBindingForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch policy binding forbidden response has a 4xx status code
func (o *PatchPolicyBindingForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch policy binding forbidden response has a 5xx status code
func (o *PatchPolicyBindingForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch policy binding forbidden response a status code equal to that given
func (o *PatchPolicyBindingForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchPolicyBindingForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings/{binding_name}][%d] patchPolicyBindingForbidden ", 403)
}

func (o *PatchPolicyBindingForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings/{binding_name}][%d] patchPolicyBindingForbidden ", 403)
}

func (o *PatchPolicyBindingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchPolicyBindingDefault creates a PatchPolicyBindingDefault with default headers values
func NewPatchPolicyBindingDefault(code int) *PatchPolicyBindingDefault {
	return &PatchPolicyBindingDefault{
		_statusCode: code,
	}
}

/*
PatchPolicyBindingDefault describes a response with status code -1, with default header values.

errorResponse
*/
type PatchPolicyBindingDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the patch policy binding default response
func (o *PatchPolicyBindingDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this patch policy binding default response has a 2xx status code
func (o *PatchPolicyBindingDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch policy binding default response has a 3xx status code
func (o *PatchPolicyBindingDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch policy binding default response has a 4xx status code
func (o *PatchPolicyBindingDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch policy binding default response has a 5xx status code
func (o *PatchPolicyBindingDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch policy binding default response a status code equal to that given
func (o *PatchPolicyBindingDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *PatchPolicyBindingDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings/{binding_name}][%d] patchPolicyBinding default  %+v", o._statusCode, o.Payload)
}

func (o *PatchPolicyBindingDefault) String() string {
	return fmt.Sprintf("[PATCH /api/v2/projects/{project_id}/clusters/{cluster_id}/policybindings/{binding_name}][%d] patchPolicyBinding default  %+v", o._statusCode, o.Payload)
}

func (o *PatchPolicyBindingDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchPolicyBindingDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
