// Code generated by go-swagger; DO NOT EDIT.

package openstack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListProjectOpenstackSizesParams creates a new ListProjectOpenstackSizesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListProjectOpenstackSizesParams() *ListProjectOpenstackSizesParams {
	return &ListProjectOpenstackSizesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListProjectOpenstackSizesParamsWithTimeout creates a new ListProjectOpenstackSizesParams object
// with the ability to set a timeout on a request.
func NewListProjectOpenstackSizesParamsWithTimeout(timeout time.Duration) *ListProjectOpenstackSizesParams {
	return &ListProjectOpenstackSizesParams{
		timeout: timeout,
	}
}

// NewListProjectOpenstackSizesParamsWithContext creates a new ListProjectOpenstackSizesParams object
// with the ability to set a context for a request.
func NewListProjectOpenstackSizesParamsWithContext(ctx context.Context) *ListProjectOpenstackSizesParams {
	return &ListProjectOpenstackSizesParams{
		Context: ctx,
	}
}

// NewListProjectOpenstackSizesParamsWithHTTPClient creates a new ListProjectOpenstackSizesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListProjectOpenstackSizesParamsWithHTTPClient(client *http.Client) *ListProjectOpenstackSizesParams {
	return &ListProjectOpenstackSizesParams{
		HTTPClient: client,
	}
}

/*
ListProjectOpenstackSizesParams contains all the parameters to send to the API endpoint

	for the list project openstack sizes operation.

	Typically these are written to a http.Request.
*/
type ListProjectOpenstackSizesParams struct {

	// ApplicationCredentialID.
	ApplicationCredentialID *string

	// ApplicationCredentialSecret.
	ApplicationCredentialSecret *string

	// Credential.
	Credential *string

	// DatacenterName.
	DatacenterName *string

	// Domain.
	Domain *string

	// OIDCAuthentication.
	OIDCAuthentication *bool

	// OpenstackProject.
	OpenstackProject *string

	// OpenstackProjectID.
	OpenstackProjectID *string

	// OpenstackTenant.
	OpenstackTenant *string

	// OpenstackTenantID.
	OpenstackTenantID *string

	// Password.
	Password *string

	// Username.
	Username *string

	// ProjectID.
	ProjectID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list project openstack sizes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProjectOpenstackSizesParams) WithDefaults() *ListProjectOpenstackSizesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list project openstack sizes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProjectOpenstackSizesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithTimeout(timeout time.Duration) *ListProjectOpenstackSizesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithContext(ctx context.Context) *ListProjectOpenstackSizesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithHTTPClient(client *http.Client) *ListProjectOpenstackSizesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationCredentialID adds the applicationCredentialID to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithApplicationCredentialID(applicationCredentialID *string) *ListProjectOpenstackSizesParams {
	o.SetApplicationCredentialID(applicationCredentialID)
	return o
}

// SetApplicationCredentialID adds the applicationCredentialId to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetApplicationCredentialID(applicationCredentialID *string) {
	o.ApplicationCredentialID = applicationCredentialID
}

// WithApplicationCredentialSecret adds the applicationCredentialSecret to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithApplicationCredentialSecret(applicationCredentialSecret *string) *ListProjectOpenstackSizesParams {
	o.SetApplicationCredentialSecret(applicationCredentialSecret)
	return o
}

// SetApplicationCredentialSecret adds the applicationCredentialSecret to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetApplicationCredentialSecret(applicationCredentialSecret *string) {
	o.ApplicationCredentialSecret = applicationCredentialSecret
}

// WithCredential adds the credential to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithCredential(credential *string) *ListProjectOpenstackSizesParams {
	o.SetCredential(credential)
	return o
}

// SetCredential adds the credential to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetCredential(credential *string) {
	o.Credential = credential
}

// WithDatacenterName adds the datacenterName to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithDatacenterName(datacenterName *string) *ListProjectOpenstackSizesParams {
	o.SetDatacenterName(datacenterName)
	return o
}

// SetDatacenterName adds the datacenterName to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetDatacenterName(datacenterName *string) {
	o.DatacenterName = datacenterName
}

// WithDomain adds the domain to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithDomain(domain *string) *ListProjectOpenstackSizesParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithOIDCAuthentication adds the oIDCAuthentication to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithOIDCAuthentication(oIDCAuthentication *bool) *ListProjectOpenstackSizesParams {
	o.SetOIDCAuthentication(oIDCAuthentication)
	return o
}

// SetOIDCAuthentication adds the oIdCAuthentication to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetOIDCAuthentication(oIDCAuthentication *bool) {
	o.OIDCAuthentication = oIDCAuthentication
}

// WithOpenstackProject adds the openstackProject to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithOpenstackProject(openstackProject *string) *ListProjectOpenstackSizesParams {
	o.SetOpenstackProject(openstackProject)
	return o
}

// SetOpenstackProject adds the openstackProject to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetOpenstackProject(openstackProject *string) {
	o.OpenstackProject = openstackProject
}

// WithOpenstackProjectID adds the openstackProjectID to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithOpenstackProjectID(openstackProjectID *string) *ListProjectOpenstackSizesParams {
	o.SetOpenstackProjectID(openstackProjectID)
	return o
}

// SetOpenstackProjectID adds the openstackProjectId to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetOpenstackProjectID(openstackProjectID *string) {
	o.OpenstackProjectID = openstackProjectID
}

// WithOpenstackTenant adds the openstackTenant to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithOpenstackTenant(openstackTenant *string) *ListProjectOpenstackSizesParams {
	o.SetOpenstackTenant(openstackTenant)
	return o
}

// SetOpenstackTenant adds the openstackTenant to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetOpenstackTenant(openstackTenant *string) {
	o.OpenstackTenant = openstackTenant
}

// WithOpenstackTenantID adds the openstackTenantID to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithOpenstackTenantID(openstackTenantID *string) *ListProjectOpenstackSizesParams {
	o.SetOpenstackTenantID(openstackTenantID)
	return o
}

// SetOpenstackTenantID adds the openstackTenantId to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetOpenstackTenantID(openstackTenantID *string) {
	o.OpenstackTenantID = openstackTenantID
}

// WithPassword adds the password to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithPassword(password *string) *ListProjectOpenstackSizesParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetPassword(password *string) {
	o.Password = password
}

// WithUsername adds the username to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithUsername(username *string) *ListProjectOpenstackSizesParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetUsername(username *string) {
	o.Username = username
}

// WithProjectID adds the projectID to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) WithProjectID(projectID string) *ListProjectOpenstackSizesParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the list project openstack sizes params
func (o *ListProjectOpenstackSizesParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *ListProjectOpenstackSizesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApplicationCredentialID != nil {

		// header param ApplicationCredentialID
		if err := r.SetHeaderParam("ApplicationCredentialID", *o.ApplicationCredentialID); err != nil {
			return err
		}
	}

	if o.ApplicationCredentialSecret != nil {

		// header param ApplicationCredentialSecret
		if err := r.SetHeaderParam("ApplicationCredentialSecret", *o.ApplicationCredentialSecret); err != nil {
			return err
		}
	}

	if o.Credential != nil {

		// header param Credential
		if err := r.SetHeaderParam("Credential", *o.Credential); err != nil {
			return err
		}
	}

	if o.DatacenterName != nil {

		// header param DatacenterName
		if err := r.SetHeaderParam("DatacenterName", *o.DatacenterName); err != nil {
			return err
		}
	}

	if o.Domain != nil {

		// header param Domain
		if err := r.SetHeaderParam("Domain", *o.Domain); err != nil {
			return err
		}
	}

	if o.OIDCAuthentication != nil {

		// header param OIDCAuthentication
		if err := r.SetHeaderParam("OIDCAuthentication", swag.FormatBool(*o.OIDCAuthentication)); err != nil {
			return err
		}
	}

	if o.OpenstackProject != nil {

		// header param OpenstackProject
		if err := r.SetHeaderParam("OpenstackProject", *o.OpenstackProject); err != nil {
			return err
		}
	}

	if o.OpenstackProjectID != nil {

		// header param OpenstackProjectID
		if err := r.SetHeaderParam("OpenstackProjectID", *o.OpenstackProjectID); err != nil {
			return err
		}
	}

	if o.OpenstackTenant != nil {

		// header param OpenstackTenant
		if err := r.SetHeaderParam("OpenstackTenant", *o.OpenstackTenant); err != nil {
			return err
		}
	}

	if o.OpenstackTenantID != nil {

		// header param OpenstackTenantID
		if err := r.SetHeaderParam("OpenstackTenantID", *o.OpenstackTenantID); err != nil {
			return err
		}
	}

	if o.Password != nil {

		// header param Password
		if err := r.SetHeaderParam("Password", *o.Password); err != nil {
			return err
		}
	}

	if o.Username != nil {

		// header param Username
		if err := r.SetHeaderParam("Username", *o.Username); err != nil {
			return err
		}
	}

	// path param project_id
	if err := r.SetPathParam("project_id", o.ProjectID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
