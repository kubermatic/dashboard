// Code generated by go-swagger; DO NOT EDIT.

package anexia

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListProjectAnexiaDiskTypesParams creates a new ListProjectAnexiaDiskTypesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListProjectAnexiaDiskTypesParams() *ListProjectAnexiaDiskTypesParams {
	return &ListProjectAnexiaDiskTypesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListProjectAnexiaDiskTypesParamsWithTimeout creates a new ListProjectAnexiaDiskTypesParams object
// with the ability to set a timeout on a request.
func NewListProjectAnexiaDiskTypesParamsWithTimeout(timeout time.Duration) *ListProjectAnexiaDiskTypesParams {
	return &ListProjectAnexiaDiskTypesParams{
		timeout: timeout,
	}
}

// NewListProjectAnexiaDiskTypesParamsWithContext creates a new ListProjectAnexiaDiskTypesParams object
// with the ability to set a context for a request.
func NewListProjectAnexiaDiskTypesParamsWithContext(ctx context.Context) *ListProjectAnexiaDiskTypesParams {
	return &ListProjectAnexiaDiskTypesParams{
		Context: ctx,
	}
}

// NewListProjectAnexiaDiskTypesParamsWithHTTPClient creates a new ListProjectAnexiaDiskTypesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListProjectAnexiaDiskTypesParamsWithHTTPClient(client *http.Client) *ListProjectAnexiaDiskTypesParams {
	return &ListProjectAnexiaDiskTypesParams{
		HTTPClient: client,
	}
}

/*
ListProjectAnexiaDiskTypesParams contains all the parameters to send to the API endpoint

	for the list project anexia disk types operation.

	Typically these are written to a http.Request.
*/
type ListProjectAnexiaDiskTypesParams struct {

	// Credential.
	Credential *string

	// Location.
	Location *string

	// Token.
	Token *string

	// ProjectID.
	ProjectID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list project anexia disk types params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProjectAnexiaDiskTypesParams) WithDefaults() *ListProjectAnexiaDiskTypesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list project anexia disk types params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProjectAnexiaDiskTypesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) WithTimeout(timeout time.Duration) *ListProjectAnexiaDiskTypesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) WithContext(ctx context.Context) *ListProjectAnexiaDiskTypesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) WithHTTPClient(client *http.Client) *ListProjectAnexiaDiskTypesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCredential adds the credential to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) WithCredential(credential *string) *ListProjectAnexiaDiskTypesParams {
	o.SetCredential(credential)
	return o
}

// SetCredential adds the credential to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) SetCredential(credential *string) {
	o.Credential = credential
}

// WithLocation adds the location to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) WithLocation(location *string) *ListProjectAnexiaDiskTypesParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) SetLocation(location *string) {
	o.Location = location
}

// WithToken adds the token to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) WithToken(token *string) *ListProjectAnexiaDiskTypesParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) SetToken(token *string) {
	o.Token = token
}

// WithProjectID adds the projectID to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) WithProjectID(projectID string) *ListProjectAnexiaDiskTypesParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the list project anexia disk types params
func (o *ListProjectAnexiaDiskTypesParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *ListProjectAnexiaDiskTypesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Credential != nil {

		// header param Credential
		if err := r.SetHeaderParam("Credential", *o.Credential); err != nil {
			return err
		}
	}

	if o.Location != nil {

		// header param Location
		if err := r.SetHeaderParam("Location", *o.Location); err != nil {
			return err
		}
	}

	if o.Token != nil {

		// header param Token
		if err := r.SetHeaderParam("Token", *o.Token); err != nil {
			return err
		}
	}

	// path param project_id
	if err := r.SetPathParam("project_id", o.ProjectID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
