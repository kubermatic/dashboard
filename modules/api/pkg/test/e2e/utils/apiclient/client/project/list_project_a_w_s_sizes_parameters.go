// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListProjectAWSSizesParams creates a new ListProjectAWSSizesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListProjectAWSSizesParams() *ListProjectAWSSizesParams {
	return &ListProjectAWSSizesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListProjectAWSSizesParamsWithTimeout creates a new ListProjectAWSSizesParams object
// with the ability to set a timeout on a request.
func NewListProjectAWSSizesParamsWithTimeout(timeout time.Duration) *ListProjectAWSSizesParams {
	return &ListProjectAWSSizesParams{
		timeout: timeout,
	}
}

// NewListProjectAWSSizesParamsWithContext creates a new ListProjectAWSSizesParams object
// with the ability to set a context for a request.
func NewListProjectAWSSizesParamsWithContext(ctx context.Context) *ListProjectAWSSizesParams {
	return &ListProjectAWSSizesParams{
		Context: ctx,
	}
}

// NewListProjectAWSSizesParamsWithHTTPClient creates a new ListProjectAWSSizesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListProjectAWSSizesParamsWithHTTPClient(client *http.Client) *ListProjectAWSSizesParams {
	return &ListProjectAWSSizesParams{
		HTTPClient: client,
	}
}

/*
ListProjectAWSSizesParams contains all the parameters to send to the API endpoint

	for the list project a w s sizes operation.

	Typically these are written to a http.Request.
*/
type ListProjectAWSSizesParams struct {

	// AccessKeyID.
	AccessKeyID *string

	// AssumeRoleARN.
	AssumeRoleARN *string

	// AssumeRoleExternalID.
	AssumeRoleExternalID *string

	// Credential.
	Credential *string

	// DatacenterName.
	DatacenterName *string

	// Region.
	Region *string

	// SecretAccessKey.
	SecretAccessKey *string

	// VPC.
	VPC *string

	/* Architecture.

	   architecture query parameter. Supports: arm64 and x64 types.
	*/
	Architecture *string

	// ProjectID.
	ProjectID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list project a w s sizes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProjectAWSSizesParams) WithDefaults() *ListProjectAWSSizesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list project a w s sizes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProjectAWSSizesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithTimeout(timeout time.Duration) *ListProjectAWSSizesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithContext(ctx context.Context) *ListProjectAWSSizesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithHTTPClient(client *http.Client) *ListProjectAWSSizesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessKeyID adds the accessKeyID to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithAccessKeyID(accessKeyID *string) *ListProjectAWSSizesParams {
	o.SetAccessKeyID(accessKeyID)
	return o
}

// SetAccessKeyID adds the accessKeyId to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetAccessKeyID(accessKeyID *string) {
	o.AccessKeyID = accessKeyID
}

// WithAssumeRoleARN adds the assumeRoleARN to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithAssumeRoleARN(assumeRoleARN *string) *ListProjectAWSSizesParams {
	o.SetAssumeRoleARN(assumeRoleARN)
	return o
}

// SetAssumeRoleARN adds the assumeRoleARN to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetAssumeRoleARN(assumeRoleARN *string) {
	o.AssumeRoleARN = assumeRoleARN
}

// WithAssumeRoleExternalID adds the assumeRoleExternalID to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithAssumeRoleExternalID(assumeRoleExternalID *string) *ListProjectAWSSizesParams {
	o.SetAssumeRoleExternalID(assumeRoleExternalID)
	return o
}

// SetAssumeRoleExternalID adds the assumeRoleExternalId to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetAssumeRoleExternalID(assumeRoleExternalID *string) {
	o.AssumeRoleExternalID = assumeRoleExternalID
}

// WithCredential adds the credential to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithCredential(credential *string) *ListProjectAWSSizesParams {
	o.SetCredential(credential)
	return o
}

// SetCredential adds the credential to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetCredential(credential *string) {
	o.Credential = credential
}

// WithDatacenterName adds the datacenterName to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithDatacenterName(datacenterName *string) *ListProjectAWSSizesParams {
	o.SetDatacenterName(datacenterName)
	return o
}

// SetDatacenterName adds the datacenterName to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetDatacenterName(datacenterName *string) {
	o.DatacenterName = datacenterName
}

// WithRegion adds the region to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithRegion(region *string) *ListProjectAWSSizesParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetRegion(region *string) {
	o.Region = region
}

// WithSecretAccessKey adds the secretAccessKey to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithSecretAccessKey(secretAccessKey *string) *ListProjectAWSSizesParams {
	o.SetSecretAccessKey(secretAccessKey)
	return o
}

// SetSecretAccessKey adds the secretAccessKey to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetSecretAccessKey(secretAccessKey *string) {
	o.SecretAccessKey = secretAccessKey
}

// WithVPC adds the vPC to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithVPC(vPC *string) *ListProjectAWSSizesParams {
	o.SetVPC(vPC)
	return o
}

// SetVPC adds the vPC to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetVPC(vPC *string) {
	o.VPC = vPC
}

// WithArchitecture adds the architecture to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithArchitecture(architecture *string) *ListProjectAWSSizesParams {
	o.SetArchitecture(architecture)
	return o
}

// SetArchitecture adds the architecture to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetArchitecture(architecture *string) {
	o.Architecture = architecture
}

// WithProjectID adds the projectID to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) WithProjectID(projectID string) *ListProjectAWSSizesParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the list project a w s sizes params
func (o *ListProjectAWSSizesParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *ListProjectAWSSizesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessKeyID != nil {

		// header param AccessKeyID
		if err := r.SetHeaderParam("AccessKeyID", *o.AccessKeyID); err != nil {
			return err
		}
	}

	if o.AssumeRoleARN != nil {

		// header param AssumeRoleARN
		if err := r.SetHeaderParam("AssumeRoleARN", *o.AssumeRoleARN); err != nil {
			return err
		}
	}

	if o.AssumeRoleExternalID != nil {

		// header param AssumeRoleExternalID
		if err := r.SetHeaderParam("AssumeRoleExternalID", *o.AssumeRoleExternalID); err != nil {
			return err
		}
	}

	if o.Credential != nil {

		// header param Credential
		if err := r.SetHeaderParam("Credential", *o.Credential); err != nil {
			return err
		}
	}

	if o.DatacenterName != nil {

		// header param DatacenterName
		if err := r.SetHeaderParam("DatacenterName", *o.DatacenterName); err != nil {
			return err
		}
	}

	if o.Region != nil {

		// header param Region
		if err := r.SetHeaderParam("Region", *o.Region); err != nil {
			return err
		}
	}

	if o.SecretAccessKey != nil {

		// header param SecretAccessKey
		if err := r.SetHeaderParam("SecretAccessKey", *o.SecretAccessKey); err != nil {
			return err
		}
	}

	if o.VPC != nil {

		// header param VPC
		if err := r.SetHeaderParam("VPC", *o.VPC); err != nil {
			return err
		}
	}

	if o.Architecture != nil {

		// query param architecture
		var qrArchitecture string

		if o.Architecture != nil {
			qrArchitecture = *o.Architecture
		}
		qArchitecture := qrArchitecture
		if qArchitecture != "" {

			if err := r.SetQueryParam("architecture", qArchitecture); err != nil {
				return err
			}
		}
	}

	// path param project_id
	if err := r.SetPathParam("project_id", o.ProjectID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
