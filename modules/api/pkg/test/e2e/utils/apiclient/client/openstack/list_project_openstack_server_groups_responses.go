// Code generated by go-swagger; DO NOT EDIT.

package openstack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"k8c.io/dashboard/v2/pkg/test/e2e/utils/apiclient/models"
)

// ListProjectOpenstackServerGroupsReader is a Reader for the ListProjectOpenstackServerGroups structure.
type ListProjectOpenstackServerGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListProjectOpenstackServerGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListProjectOpenstackServerGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListProjectOpenstackServerGroupsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListProjectOpenstackServerGroupsOK creates a ListProjectOpenstackServerGroupsOK with default headers values
func NewListProjectOpenstackServerGroupsOK() *ListProjectOpenstackServerGroupsOK {
	return &ListProjectOpenstackServerGroupsOK{}
}

/*
ListProjectOpenstackServerGroupsOK describes a response with status code 200, with default header values.

OpenstackServerGroup
*/
type ListProjectOpenstackServerGroupsOK struct {
	Payload []*models.OpenstackServerGroup
}

// IsSuccess returns true when this list project openstack server groups o k response has a 2xx status code
func (o *ListProjectOpenstackServerGroupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list project openstack server groups o k response has a 3xx status code
func (o *ListProjectOpenstackServerGroupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list project openstack server groups o k response has a 4xx status code
func (o *ListProjectOpenstackServerGroupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list project openstack server groups o k response has a 5xx status code
func (o *ListProjectOpenstackServerGroupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list project openstack server groups o k response a status code equal to that given
func (o *ListProjectOpenstackServerGroupsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListProjectOpenstackServerGroupsOK) Error() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/providers/openstack/servergroups][%d] listProjectOpenstackServerGroupsOK  %+v", 200, o.Payload)
}

func (o *ListProjectOpenstackServerGroupsOK) String() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/providers/openstack/servergroups][%d] listProjectOpenstackServerGroupsOK  %+v", 200, o.Payload)
}

func (o *ListProjectOpenstackServerGroupsOK) GetPayload() []*models.OpenstackServerGroup {
	return o.Payload
}

func (o *ListProjectOpenstackServerGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListProjectOpenstackServerGroupsDefault creates a ListProjectOpenstackServerGroupsDefault with default headers values
func NewListProjectOpenstackServerGroupsDefault(code int) *ListProjectOpenstackServerGroupsDefault {
	return &ListProjectOpenstackServerGroupsDefault{
		_statusCode: code,
	}
}

/*
ListProjectOpenstackServerGroupsDefault describes a response with status code -1, with default header values.

errorResponse
*/
type ListProjectOpenstackServerGroupsDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the list project openstack server groups default response
func (o *ListProjectOpenstackServerGroupsDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this list project openstack server groups default response has a 2xx status code
func (o *ListProjectOpenstackServerGroupsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list project openstack server groups default response has a 3xx status code
func (o *ListProjectOpenstackServerGroupsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list project openstack server groups default response has a 4xx status code
func (o *ListProjectOpenstackServerGroupsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list project openstack server groups default response has a 5xx status code
func (o *ListProjectOpenstackServerGroupsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list project openstack server groups default response a status code equal to that given
func (o *ListProjectOpenstackServerGroupsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ListProjectOpenstackServerGroupsDefault) Error() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/providers/openstack/servergroups][%d] listProjectOpenstackServerGroups default  %+v", o._statusCode, o.Payload)
}

func (o *ListProjectOpenstackServerGroupsDefault) String() string {
	return fmt.Sprintf("[GET /api/v2/projects/{project_id}/providers/openstack/servergroups][%d] listProjectOpenstackServerGroups default  %+v", o._statusCode, o.Payload)
}

func (o *ListProjectOpenstackServerGroupsDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ListProjectOpenstackServerGroupsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
