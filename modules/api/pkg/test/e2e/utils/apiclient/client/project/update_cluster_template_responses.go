// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"k8c.io/dashboard/v2/pkg/test/e2e/utils/apiclient/models"
)

// UpdateClusterTemplateReader is a Reader for the UpdateClusterTemplate structure.
type UpdateClusterTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateClusterTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateClusterTemplateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateClusterTemplateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateClusterTemplateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateClusterTemplateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateClusterTemplateCreated creates a UpdateClusterTemplateCreated with default headers values
func NewUpdateClusterTemplateCreated() *UpdateClusterTemplateCreated {
	return &UpdateClusterTemplateCreated{}
}

/*
UpdateClusterTemplateCreated describes a response with status code 201, with default header values.

ClusterTemplate
*/
type UpdateClusterTemplateCreated struct {
	Payload *models.ClusterTemplate
}

// IsSuccess returns true when this update cluster template created response has a 2xx status code
func (o *UpdateClusterTemplateCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update cluster template created response has a 3xx status code
func (o *UpdateClusterTemplateCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster template created response has a 4xx status code
func (o *UpdateClusterTemplateCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update cluster template created response has a 5xx status code
func (o *UpdateClusterTemplateCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster template created response a status code equal to that given
func (o *UpdateClusterTemplateCreated) IsCode(code int) bool {
	return code == 201
}

func (o *UpdateClusterTemplateCreated) Error() string {
	return fmt.Sprintf("[PUT /api/v2/projects/{project_id}/clustertemplates/{template_id}][%d] updateClusterTemplateCreated  %+v", 201, o.Payload)
}

func (o *UpdateClusterTemplateCreated) String() string {
	return fmt.Sprintf("[PUT /api/v2/projects/{project_id}/clustertemplates/{template_id}][%d] updateClusterTemplateCreated  %+v", 201, o.Payload)
}

func (o *UpdateClusterTemplateCreated) GetPayload() *models.ClusterTemplate {
	return o.Payload
}

func (o *UpdateClusterTemplateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClusterTemplate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClusterTemplateUnauthorized creates a UpdateClusterTemplateUnauthorized with default headers values
func NewUpdateClusterTemplateUnauthorized() *UpdateClusterTemplateUnauthorized {
	return &UpdateClusterTemplateUnauthorized{}
}

/*
UpdateClusterTemplateUnauthorized describes a response with status code 401, with default header values.

EmptyResponse is a empty response
*/
type UpdateClusterTemplateUnauthorized struct {
}

// IsSuccess returns true when this update cluster template unauthorized response has a 2xx status code
func (o *UpdateClusterTemplateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster template unauthorized response has a 3xx status code
func (o *UpdateClusterTemplateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster template unauthorized response has a 4xx status code
func (o *UpdateClusterTemplateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cluster template unauthorized response has a 5xx status code
func (o *UpdateClusterTemplateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster template unauthorized response a status code equal to that given
func (o *UpdateClusterTemplateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateClusterTemplateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v2/projects/{project_id}/clustertemplates/{template_id}][%d] updateClusterTemplateUnauthorized ", 401)
}

func (o *UpdateClusterTemplateUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v2/projects/{project_id}/clustertemplates/{template_id}][%d] updateClusterTemplateUnauthorized ", 401)
}

func (o *UpdateClusterTemplateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateClusterTemplateForbidden creates a UpdateClusterTemplateForbidden with default headers values
func NewUpdateClusterTemplateForbidden() *UpdateClusterTemplateForbidden {
	return &UpdateClusterTemplateForbidden{}
}

/*
UpdateClusterTemplateForbidden describes a response with status code 403, with default header values.

EmptyResponse is a empty response
*/
type UpdateClusterTemplateForbidden struct {
}

// IsSuccess returns true when this update cluster template forbidden response has a 2xx status code
func (o *UpdateClusterTemplateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update cluster template forbidden response has a 3xx status code
func (o *UpdateClusterTemplateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update cluster template forbidden response has a 4xx status code
func (o *UpdateClusterTemplateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update cluster template forbidden response has a 5xx status code
func (o *UpdateClusterTemplateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update cluster template forbidden response a status code equal to that given
func (o *UpdateClusterTemplateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateClusterTemplateForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v2/projects/{project_id}/clustertemplates/{template_id}][%d] updateClusterTemplateForbidden ", 403)
}

func (o *UpdateClusterTemplateForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v2/projects/{project_id}/clustertemplates/{template_id}][%d] updateClusterTemplateForbidden ", 403)
}

func (o *UpdateClusterTemplateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateClusterTemplateDefault creates a UpdateClusterTemplateDefault with default headers values
func NewUpdateClusterTemplateDefault(code int) *UpdateClusterTemplateDefault {
	return &UpdateClusterTemplateDefault{
		_statusCode: code,
	}
}

/*
UpdateClusterTemplateDefault describes a response with status code -1, with default header values.

errorResponse
*/
type UpdateClusterTemplateDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the update cluster template default response
func (o *UpdateClusterTemplateDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this update cluster template default response has a 2xx status code
func (o *UpdateClusterTemplateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update cluster template default response has a 3xx status code
func (o *UpdateClusterTemplateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update cluster template default response has a 4xx status code
func (o *UpdateClusterTemplateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update cluster template default response has a 5xx status code
func (o *UpdateClusterTemplateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update cluster template default response a status code equal to that given
func (o *UpdateClusterTemplateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *UpdateClusterTemplateDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v2/projects/{project_id}/clustertemplates/{template_id}][%d] updateClusterTemplate default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateClusterTemplateDefault) String() string {
	return fmt.Sprintf("[PUT /api/v2/projects/{project_id}/clustertemplates/{template_id}][%d] updateClusterTemplate default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateClusterTemplateDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateClusterTemplateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateClusterTemplateBody update cluster template body
swagger:model UpdateClusterTemplateBody
*/
type UpdateClusterTemplateBody struct {

	// applications
	Applications []*models.Application `json:"applications"`

	// name
	Name string `json:"name,omitempty"`

	// scope
	Scope string `json:"scope,omitempty"`

	// user SSH keys
	UserSSHKeys []*models.ClusterTemplateSSHKey `json:"userSshKeys"`

	// cluster
	Cluster *models.Cluster `json:"cluster,omitempty"`

	// node deployment
	NodeDeployment *models.NodeDeployment `json:"nodeDeployment,omitempty"`
}

// Validate validates this update cluster template body
func (o *UpdateClusterTemplateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserSSHKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNodeDeployment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateClusterTemplateBody) validateApplications(formats strfmt.Registry) error {
	if swag.IsZero(o.Applications) { // not required
		return nil
	}

	for i := 0; i < len(o.Applications); i++ {
		if swag.IsZero(o.Applications[i]) { // not required
			continue
		}

		if o.Applications[i] != nil {
			if err := o.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Body" + "." + "applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Body" + "." + "applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateClusterTemplateBody) validateUserSSHKeys(formats strfmt.Registry) error {
	if swag.IsZero(o.UserSSHKeys) { // not required
		return nil
	}

	for i := 0; i < len(o.UserSSHKeys); i++ {
		if swag.IsZero(o.UserSSHKeys[i]) { // not required
			continue
		}

		if o.UserSSHKeys[i] != nil {
			if err := o.UserSSHKeys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Body" + "." + "userSshKeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Body" + "." + "userSshKeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateClusterTemplateBody) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(o.Cluster) { // not required
		return nil
	}

	if o.Cluster != nil {
		if err := o.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Body" + "." + "cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Body" + "." + "cluster")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateClusterTemplateBody) validateNodeDeployment(formats strfmt.Registry) error {
	if swag.IsZero(o.NodeDeployment) { // not required
		return nil
	}

	if o.NodeDeployment != nil {
		if err := o.NodeDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Body" + "." + "nodeDeployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Body" + "." + "nodeDeployment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update cluster template body based on the context it is used
func (o *UpdateClusterTemplateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateApplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUserSSHKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNodeDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateClusterTemplateBody) contextValidateApplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Applications); i++ {

		if o.Applications[i] != nil {
			if err := o.Applications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Body" + "." + "applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Body" + "." + "applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateClusterTemplateBody) contextValidateUserSSHKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.UserSSHKeys); i++ {

		if o.UserSSHKeys[i] != nil {
			if err := o.UserSSHKeys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Body" + "." + "userSshKeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Body" + "." + "userSshKeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateClusterTemplateBody) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if o.Cluster != nil {
		if err := o.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Body" + "." + "cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Body" + "." + "cluster")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateClusterTemplateBody) contextValidateNodeDeployment(ctx context.Context, formats strfmt.Registry) error {

	if o.NodeDeployment != nil {
		if err := o.NodeDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Body" + "." + "nodeDeployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Body" + "." + "nodeDeployment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateClusterTemplateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateClusterTemplateBody) UnmarshalBinary(b []byte) error {
	var res UpdateClusterTemplateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
