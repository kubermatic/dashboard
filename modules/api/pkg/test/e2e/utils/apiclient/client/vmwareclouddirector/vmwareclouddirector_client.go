// Code generated by go-swagger; DO NOT EDIT.

package vmwareclouddirector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vmwareclouddirector API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vmwareclouddirector API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ListProjectVMwareCloudDirectorCatalogs(params *ListProjectVMwareCloudDirectorCatalogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectVMwareCloudDirectorCatalogsOK, error)

	ListProjectVMwareCloudDirectorComputePolicies(params *ListProjectVMwareCloudDirectorComputePoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectVMwareCloudDirectorComputePoliciesOK, error)

	ListProjectVMwareCloudDirectorNetworks(params *ListProjectVMwareCloudDirectorNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectVMwareCloudDirectorNetworksOK, error)

	ListProjectVMwareCloudDirectorStorageProfiles(params *ListProjectVMwareCloudDirectorStorageProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectVMwareCloudDirectorStorageProfilesOK, error)

	ListProjectVMwareCloudDirectorTemplates(params *ListProjectVMwareCloudDirectorTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectVMwareCloudDirectorTemplatesOK, error)

	ListVMwareCloudDirectorCatalogs(params *ListVMwareCloudDirectorCatalogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorCatalogsOK, error)

	ListVMwareCloudDirectorCatalogsNoCredentials(params *ListVMwareCloudDirectorCatalogsNoCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorCatalogsNoCredentialsOK, error)

	ListVMwareCloudDirectorComputePoliciesNoCredentials(params *ListVMwareCloudDirectorComputePoliciesNoCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorComputePoliciesNoCredentialsOK, error)

	ListVMwareCloudDirectorNetworks(params *ListVMwareCloudDirectorNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorNetworksOK, error)

	ListVMwareCloudDirectorNetworksNoCredentials(params *ListVMwareCloudDirectorNetworksNoCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorNetworksNoCredentialsOK, error)

	ListVMwareCloudDirectorStorageProfiles(params *ListVMwareCloudDirectorStorageProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorStorageProfilesOK, error)

	ListVMwareCloudDirectorStorageProfilesNoCredentials(params *ListVMwareCloudDirectorStorageProfilesNoCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorStorageProfilesNoCredentialsOK, error)

	ListVMwareCloudDirectorTemplates(params *ListVMwareCloudDirectorTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorTemplatesOK, error)

	ListVMwareCloudDirectorTemplatesNoCredentials(params *ListVMwareCloudDirectorTemplatesNoCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorTemplatesNoCredentialsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ListProjectVMwareCloudDirectorCatalogs List VMware Cloud Director Catalogs
*/
func (a *Client) ListProjectVMwareCloudDirectorCatalogs(params *ListProjectVMwareCloudDirectorCatalogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectVMwareCloudDirectorCatalogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectVMwareCloudDirectorCatalogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjectVMwareCloudDirectorCatalogs",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/providers/vmwareclouddirector/{dc}/catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProjectVMwareCloudDirectorCatalogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectVMwareCloudDirectorCatalogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListProjectVMwareCloudDirectorCatalogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListProjectVMwareCloudDirectorComputePolicies List VMware Cloud Director Compute Policies
*/
func (a *Client) ListProjectVMwareCloudDirectorComputePolicies(params *ListProjectVMwareCloudDirectorComputePoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectVMwareCloudDirectorComputePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectVMwareCloudDirectorComputePoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjectVMwareCloudDirectorComputePolicies",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/providers/vmwareclouddirector/{dc}/computepolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProjectVMwareCloudDirectorComputePoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectVMwareCloudDirectorComputePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListProjectVMwareCloudDirectorComputePoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListProjectVMwareCloudDirectorNetworks List VMware Cloud Director OVDC Networks
*/
func (a *Client) ListProjectVMwareCloudDirectorNetworks(params *ListProjectVMwareCloudDirectorNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectVMwareCloudDirectorNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectVMwareCloudDirectorNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjectVMwareCloudDirectorNetworks",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/providers/vmwareclouddirector/{dc}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProjectVMwareCloudDirectorNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectVMwareCloudDirectorNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListProjectVMwareCloudDirectorNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListProjectVMwareCloudDirectorStorageProfiles List VMware Cloud Director Storage Profiles
*/
func (a *Client) ListProjectVMwareCloudDirectorStorageProfiles(params *ListProjectVMwareCloudDirectorStorageProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectVMwareCloudDirectorStorageProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectVMwareCloudDirectorStorageProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjectVMwareCloudDirectorStorageProfiles",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/providers/vmwareclouddirector/{dc}/storageprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProjectVMwareCloudDirectorStorageProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectVMwareCloudDirectorStorageProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListProjectVMwareCloudDirectorStorageProfilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListProjectVMwareCloudDirectorTemplates List VMware Cloud Director Templates
*/
func (a *Client) ListProjectVMwareCloudDirectorTemplates(params *ListProjectVMwareCloudDirectorTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectVMwareCloudDirectorTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectVMwareCloudDirectorTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjectVMwareCloudDirectorTemplates",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/providers/vmwareclouddirector/{dc}/templates/{catalog_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProjectVMwareCloudDirectorTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectVMwareCloudDirectorTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListProjectVMwareCloudDirectorTemplatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListVMwareCloudDirectorCatalogs List VMware Cloud Director Catalogs
*/
func (a *Client) ListVMwareCloudDirectorCatalogs(params *ListVMwareCloudDirectorCatalogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorCatalogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVMwareCloudDirectorCatalogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listVMwareCloudDirectorCatalogs",
		Method:             "GET",
		PathPattern:        "/api/v2/providers/vmwareclouddirector/{dc}/catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListVMwareCloudDirectorCatalogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVMwareCloudDirectorCatalogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListVMwareCloudDirectorCatalogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListVMwareCloudDirectorCatalogsNoCredentials List VMware Cloud Director Catalogs
*/
func (a *Client) ListVMwareCloudDirectorCatalogsNoCredentials(params *ListVMwareCloudDirectorCatalogsNoCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorCatalogsNoCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVMwareCloudDirectorCatalogsNoCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listVMwareCloudDirectorCatalogsNoCredentials",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListVMwareCloudDirectorCatalogsNoCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVMwareCloudDirectorCatalogsNoCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListVMwareCloudDirectorCatalogsNoCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListVMwareCloudDirectorComputePoliciesNoCredentials List VMware Cloud Director Compute Policies
*/
func (a *Client) ListVMwareCloudDirectorComputePoliciesNoCredentials(params *ListVMwareCloudDirectorComputePoliciesNoCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorComputePoliciesNoCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVMwareCloudDirectorComputePoliciesNoCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listVMwareCloudDirectorComputePoliciesNoCredentials",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/computepolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListVMwareCloudDirectorComputePoliciesNoCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVMwareCloudDirectorComputePoliciesNoCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListVMwareCloudDirectorComputePoliciesNoCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListVMwareCloudDirectorNetworks List VMware Cloud Director OVDC Networks
*/
func (a *Client) ListVMwareCloudDirectorNetworks(params *ListVMwareCloudDirectorNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVMwareCloudDirectorNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listVMwareCloudDirectorNetworks",
		Method:             "GET",
		PathPattern:        "/api/v2/providers/vmwareclouddirector/{dc}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListVMwareCloudDirectorNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVMwareCloudDirectorNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListVMwareCloudDirectorNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListVMwareCloudDirectorNetworksNoCredentials List VMware Cloud Director OVDC Networks
*/
func (a *Client) ListVMwareCloudDirectorNetworksNoCredentials(params *ListVMwareCloudDirectorNetworksNoCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorNetworksNoCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVMwareCloudDirectorNetworksNoCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listVMwareCloudDirectorNetworksNoCredentials",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListVMwareCloudDirectorNetworksNoCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVMwareCloudDirectorNetworksNoCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListVMwareCloudDirectorNetworksNoCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListVMwareCloudDirectorStorageProfiles List VMware Cloud Director Storage Profiles
*/
func (a *Client) ListVMwareCloudDirectorStorageProfiles(params *ListVMwareCloudDirectorStorageProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorStorageProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVMwareCloudDirectorStorageProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listVMwareCloudDirectorStorageProfiles",
		Method:             "GET",
		PathPattern:        "/api/v2/providers/vmwareclouddirector/{dc}/storageprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListVMwareCloudDirectorStorageProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVMwareCloudDirectorStorageProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListVMwareCloudDirectorStorageProfilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListVMwareCloudDirectorStorageProfilesNoCredentials List VMware Cloud Director Storage Profiles
*/
func (a *Client) ListVMwareCloudDirectorStorageProfilesNoCredentials(params *ListVMwareCloudDirectorStorageProfilesNoCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorStorageProfilesNoCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVMwareCloudDirectorStorageProfilesNoCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listVMwareCloudDirectorStorageProfilesNoCredentials",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/storageprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListVMwareCloudDirectorStorageProfilesNoCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVMwareCloudDirectorStorageProfilesNoCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListVMwareCloudDirectorStorageProfilesNoCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListVMwareCloudDirectorTemplates List VMware Cloud Director Templates
*/
func (a *Client) ListVMwareCloudDirectorTemplates(params *ListVMwareCloudDirectorTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVMwareCloudDirectorTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listVMwareCloudDirectorTemplates",
		Method:             "GET",
		PathPattern:        "/api/v2/providers/vmwareclouddirector/{dc}/templates/{catalog_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListVMwareCloudDirectorTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVMwareCloudDirectorTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListVMwareCloudDirectorTemplatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListVMwareCloudDirectorTemplatesNoCredentials List VMware Cloud Director Templates
*/
func (a *Client) ListVMwareCloudDirectorTemplatesNoCredentials(params *ListVMwareCloudDirectorTemplatesNoCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListVMwareCloudDirectorTemplatesNoCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVMwareCloudDirectorTemplatesNoCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listVMwareCloudDirectorTemplatesNoCredentials",
		Method:             "GET",
		PathPattern:        "/api/v2/projects/{project_id}/clusters/{cluster_id}/providers/vmwareclouddirector/templates/{catalog_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListVMwareCloudDirectorTemplatesNoCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVMwareCloudDirectorTemplatesNoCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListVMwareCloudDirectorTemplatesNoCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
