// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"k8c.io/dashboard/v2/pkg/test/e2e/utils/apiclient/models"
)

// CalculateProjectQuotaUpdateReader is a Reader for the CalculateProjectQuotaUpdate structure.
type CalculateProjectQuotaUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CalculateProjectQuotaUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCalculateProjectQuotaUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCalculateProjectQuotaUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCalculateProjectQuotaUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCalculateProjectQuotaUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCalculateProjectQuotaUpdateOK creates a CalculateProjectQuotaUpdateOK with default headers values
func NewCalculateProjectQuotaUpdateOK() *CalculateProjectQuotaUpdateOK {
	return &CalculateProjectQuotaUpdateOK{}
}

/*
CalculateProjectQuotaUpdateOK describes a response with status code 200, with default header values.

ResourceQuotaUpdateCalculation
*/
type CalculateProjectQuotaUpdateOK struct {
	Payload *models.ResourceQuotaUpdateCalculation
}

// IsSuccess returns true when this calculate project quota update o k response has a 2xx status code
func (o *CalculateProjectQuotaUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this calculate project quota update o k response has a 3xx status code
func (o *CalculateProjectQuotaUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this calculate project quota update o k response has a 4xx status code
func (o *CalculateProjectQuotaUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this calculate project quota update o k response has a 5xx status code
func (o *CalculateProjectQuotaUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this calculate project quota update o k response a status code equal to that given
func (o *CalculateProjectQuotaUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *CalculateProjectQuotaUpdateOK) Error() string {
	return fmt.Sprintf("[POST /api/v2/projects/{project_id}/quotacalculation][%d] calculateProjectQuotaUpdateOK  %+v", 200, o.Payload)
}

func (o *CalculateProjectQuotaUpdateOK) String() string {
	return fmt.Sprintf("[POST /api/v2/projects/{project_id}/quotacalculation][%d] calculateProjectQuotaUpdateOK  %+v", 200, o.Payload)
}

func (o *CalculateProjectQuotaUpdateOK) GetPayload() *models.ResourceQuotaUpdateCalculation {
	return o.Payload
}

func (o *CalculateProjectQuotaUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourceQuotaUpdateCalculation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCalculateProjectQuotaUpdateUnauthorized creates a CalculateProjectQuotaUpdateUnauthorized with default headers values
func NewCalculateProjectQuotaUpdateUnauthorized() *CalculateProjectQuotaUpdateUnauthorized {
	return &CalculateProjectQuotaUpdateUnauthorized{}
}

/*
CalculateProjectQuotaUpdateUnauthorized describes a response with status code 401, with default header values.

EmptyResponse is a empty response
*/
type CalculateProjectQuotaUpdateUnauthorized struct {
}

// IsSuccess returns true when this calculate project quota update unauthorized response has a 2xx status code
func (o *CalculateProjectQuotaUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this calculate project quota update unauthorized response has a 3xx status code
func (o *CalculateProjectQuotaUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this calculate project quota update unauthorized response has a 4xx status code
func (o *CalculateProjectQuotaUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this calculate project quota update unauthorized response has a 5xx status code
func (o *CalculateProjectQuotaUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this calculate project quota update unauthorized response a status code equal to that given
func (o *CalculateProjectQuotaUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CalculateProjectQuotaUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v2/projects/{project_id}/quotacalculation][%d] calculateProjectQuotaUpdateUnauthorized ", 401)
}

func (o *CalculateProjectQuotaUpdateUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/v2/projects/{project_id}/quotacalculation][%d] calculateProjectQuotaUpdateUnauthorized ", 401)
}

func (o *CalculateProjectQuotaUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCalculateProjectQuotaUpdateForbidden creates a CalculateProjectQuotaUpdateForbidden with default headers values
func NewCalculateProjectQuotaUpdateForbidden() *CalculateProjectQuotaUpdateForbidden {
	return &CalculateProjectQuotaUpdateForbidden{}
}

/*
CalculateProjectQuotaUpdateForbidden describes a response with status code 403, with default header values.

EmptyResponse is a empty response
*/
type CalculateProjectQuotaUpdateForbidden struct {
}

// IsSuccess returns true when this calculate project quota update forbidden response has a 2xx status code
func (o *CalculateProjectQuotaUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this calculate project quota update forbidden response has a 3xx status code
func (o *CalculateProjectQuotaUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this calculate project quota update forbidden response has a 4xx status code
func (o *CalculateProjectQuotaUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this calculate project quota update forbidden response has a 5xx status code
func (o *CalculateProjectQuotaUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this calculate project quota update forbidden response a status code equal to that given
func (o *CalculateProjectQuotaUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CalculateProjectQuotaUpdateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v2/projects/{project_id}/quotacalculation][%d] calculateProjectQuotaUpdateForbidden ", 403)
}

func (o *CalculateProjectQuotaUpdateForbidden) String() string {
	return fmt.Sprintf("[POST /api/v2/projects/{project_id}/quotacalculation][%d] calculateProjectQuotaUpdateForbidden ", 403)
}

func (o *CalculateProjectQuotaUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCalculateProjectQuotaUpdateDefault creates a CalculateProjectQuotaUpdateDefault with default headers values
func NewCalculateProjectQuotaUpdateDefault(code int) *CalculateProjectQuotaUpdateDefault {
	return &CalculateProjectQuotaUpdateDefault{
		_statusCode: code,
	}
}

/*
CalculateProjectQuotaUpdateDefault describes a response with status code -1, with default header values.

errorResponse
*/
type CalculateProjectQuotaUpdateDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the calculate project quota update default response
func (o *CalculateProjectQuotaUpdateDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this calculate project quota update default response has a 2xx status code
func (o *CalculateProjectQuotaUpdateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this calculate project quota update default response has a 3xx status code
func (o *CalculateProjectQuotaUpdateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this calculate project quota update default response has a 4xx status code
func (o *CalculateProjectQuotaUpdateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this calculate project quota update default response has a 5xx status code
func (o *CalculateProjectQuotaUpdateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this calculate project quota update default response a status code equal to that given
func (o *CalculateProjectQuotaUpdateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *CalculateProjectQuotaUpdateDefault) Error() string {
	return fmt.Sprintf("[POST /api/v2/projects/{project_id}/quotacalculation][%d] calculateProjectQuotaUpdate default  %+v", o._statusCode, o.Payload)
}

func (o *CalculateProjectQuotaUpdateDefault) String() string {
	return fmt.Sprintf("[POST /api/v2/projects/{project_id}/quotacalculation][%d] calculateProjectQuotaUpdate default  %+v", o._statusCode, o.Payload)
}

func (o *CalculateProjectQuotaUpdateDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CalculateProjectQuotaUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
