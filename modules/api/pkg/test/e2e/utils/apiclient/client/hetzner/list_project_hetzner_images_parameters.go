// Code generated by go-swagger; DO NOT EDIT.

package hetzner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListProjectHetznerImagesParams creates a new ListProjectHetznerImagesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListProjectHetznerImagesParams() *ListProjectHetznerImagesParams {
	return &ListProjectHetznerImagesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListProjectHetznerImagesParamsWithTimeout creates a new ListProjectHetznerImagesParams object
// with the ability to set a timeout on a request.
func NewListProjectHetznerImagesParamsWithTimeout(timeout time.Duration) *ListProjectHetznerImagesParams {
	return &ListProjectHetznerImagesParams{
		timeout: timeout,
	}
}

// NewListProjectHetznerImagesParamsWithContext creates a new ListProjectHetznerImagesParams object
// with the ability to set a context for a request.
func NewListProjectHetznerImagesParamsWithContext(ctx context.Context) *ListProjectHetznerImagesParams {
	return &ListProjectHetznerImagesParams{
		Context: ctx,
	}
}

// NewListProjectHetznerImagesParamsWithHTTPClient creates a new ListProjectHetznerImagesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListProjectHetznerImagesParamsWithHTTPClient(client *http.Client) *ListProjectHetznerImagesParams {
	return &ListProjectHetznerImagesParams{
		HTTPClient: client,
	}
}

/*
ListProjectHetznerImagesParams contains all the parameters to send to the API endpoint

	for the list project hetzner images operation.

	Typically these are written to a http.Request.
*/
type ListProjectHetznerImagesParams struct {

	// Credential.
	Credential *string

	// DatacenterName.
	DatacenterName *string

	// HetznerToken.
	HetznerToken *string

	// ProjectID.
	ProjectID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list project hetzner images params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProjectHetznerImagesParams) WithDefaults() *ListProjectHetznerImagesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list project hetzner images params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProjectHetznerImagesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) WithTimeout(timeout time.Duration) *ListProjectHetznerImagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) WithContext(ctx context.Context) *ListProjectHetznerImagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) WithHTTPClient(client *http.Client) *ListProjectHetznerImagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCredential adds the credential to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) WithCredential(credential *string) *ListProjectHetznerImagesParams {
	o.SetCredential(credential)
	return o
}

// SetCredential adds the credential to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) SetCredential(credential *string) {
	o.Credential = credential
}

// WithDatacenterName adds the datacenterName to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) WithDatacenterName(datacenterName *string) *ListProjectHetznerImagesParams {
	o.SetDatacenterName(datacenterName)
	return o
}

// SetDatacenterName adds the datacenterName to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) SetDatacenterName(datacenterName *string) {
	o.DatacenterName = datacenterName
}

// WithHetznerToken adds the hetznerToken to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) WithHetznerToken(hetznerToken *string) *ListProjectHetznerImagesParams {
	o.SetHetznerToken(hetznerToken)
	return o
}

// SetHetznerToken adds the hetznerToken to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) SetHetznerToken(hetznerToken *string) {
	o.HetznerToken = hetznerToken
}

// WithProjectID adds the projectID to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) WithProjectID(projectID string) *ListProjectHetznerImagesParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the list project hetzner images params
func (o *ListProjectHetznerImagesParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *ListProjectHetznerImagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Credential != nil {

		// header param Credential
		if err := r.SetHeaderParam("Credential", *o.Credential); err != nil {
			return err
		}
	}

	if o.DatacenterName != nil {

		// header param DatacenterName
		if err := r.SetHeaderParam("DatacenterName", *o.DatacenterName); err != nil {
			return err
		}
	}

	if o.HetznerToken != nil {

		// header param HetznerToken
		if err := r.SetHeaderParam("HetznerToken", *o.HetznerToken); err != nil {
			return err
		}
	}

	// path param project_id
	if err := r.SetPathParam("project_id", o.ProjectID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
