// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuditSidecarSettings audit sidecar settings
//
// swagger:model AuditSidecarSettings
type AuditSidecarSettings struct {

	// ExtraEnvs are the additional environment variables that can be set for the audit logging sidecar.
	// Additional environment variables can be set and passed to the AuditSidecarConfiguration field
	// to allow passing variables to the fluent-bit configuration.
	// Only, `Value` field is supported for the environment variables; `ValueFrom` field is not supported.
	// By default, `CLUSTER_ID` is set as an environment variable in the audit-logging sidecar.
	ExtraEnvs []*EnvVar `json:"extraEnvs"`

	// config
	Config *AuditSidecarConfiguration `json:"config,omitempty"`

	// resources
	Resources *ResourceRequirements `json:"resources,omitempty"`
}

// Validate validates this audit sidecar settings
func (m *AuditSidecarSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtraEnvs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditSidecarSettings) validateExtraEnvs(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraEnvs) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtraEnvs); i++ {
		if swag.IsZero(m.ExtraEnvs[i]) { // not required
			continue
		}

		if m.ExtraEnvs[i] != nil {
			if err := m.ExtraEnvs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extraEnvs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extraEnvs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuditSidecarSettings) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *AuditSidecarSettings) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this audit sidecar settings based on the context it is used
func (m *AuditSidecarSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtraEnvs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditSidecarSettings) contextValidateExtraEnvs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExtraEnvs); i++ {

		if m.ExtraEnvs[i] != nil {
			if err := m.ExtraEnvs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extraEnvs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extraEnvs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuditSidecarSettings) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *AuditSidecarSettings) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {
		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditSidecarSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditSidecarSettings) UnmarshalBinary(b []byte) error {
	var res AuditSidecarSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
