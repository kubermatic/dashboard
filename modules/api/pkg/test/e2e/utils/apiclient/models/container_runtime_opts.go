// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContainerRuntimeOpts ContainerRuntimeOpts represents a set of options to configure container-runtime binary used in nodes.
//
// swagger:model ContainerRuntimeOpts
type ContainerRuntimeOpts struct {

	// Optional: EnableNonRootDeviceOwnership enables the non-root device ownership feature in the container runtime.
	EnableNonRootDeviceOwnership bool `json:"enableNonRootDeviceOwnership,omitempty"`

	// Optional: These image registries will be configured as insecure
	// on the container runtime.
	InsecureRegistries []string `json:"insecureRegistries"`

	// Optional: Translates to --pod-infra-container-image on the kubelet.
	// If not set, the kubelet will default it.
	PauseImage string `json:"pauseImage,omitempty"`

	// Optional: These image registries will be configured as registry mirrors
	// on the container runtime.
	RegistryMirrors []string `json:"registryMirrors"`

	// containerd registry mirrors
	ContainerdRegistryMirrors *ContainerRuntimeContainerd `json:"containerdRegistryMirrors,omitempty"`
}

// Validate validates this container runtime opts
func (m *ContainerRuntimeOpts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerdRegistryMirrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerRuntimeOpts) validateContainerdRegistryMirrors(formats strfmt.Registry) error {
	if swag.IsZero(m.ContainerdRegistryMirrors) { // not required
		return nil
	}

	if m.ContainerdRegistryMirrors != nil {
		if err := m.ContainerdRegistryMirrors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerdRegistryMirrors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("containerdRegistryMirrors")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this container runtime opts based on the context it is used
func (m *ContainerRuntimeOpts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContainerdRegistryMirrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerRuntimeOpts) contextValidateContainerdRegistryMirrors(ctx context.Context, formats strfmt.Registry) error {

	if m.ContainerdRegistryMirrors != nil {
		if err := m.ContainerdRegistryMirrors.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerdRegistryMirrors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("containerdRegistryMirrors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainerRuntimeOpts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerRuntimeOpts) UnmarshalBinary(b []byte) error {
	var res ContainerRuntimeOpts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
