// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourceQuotaUpdateCalculation resource quota update calculation
//
// swagger:model ResourceQuotaUpdateCalculation
type ResourceQuotaUpdateCalculation struct {

	// Message is filled if a resource in the calculated quota exceeds the resource quota limits.
	Message string `json:"message,omitempty"`

	// calculated quota
	CalculatedQuota *Quota `json:"calculatedQuota,omitempty"`

	// resource quota
	ResourceQuota *ResourceQuota `json:"resourceQuota,omitempty"`
}

// Validate validates this resource quota update calculation
func (m *ResourceQuotaUpdateCalculation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalculatedQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceQuota(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceQuotaUpdateCalculation) validateCalculatedQuota(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculatedQuota) { // not required
		return nil
	}

	if m.CalculatedQuota != nil {
		if err := m.CalculatedQuota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("calculatedQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("calculatedQuota")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceQuotaUpdateCalculation) validateResourceQuota(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceQuota) { // not required
		return nil
	}

	if m.ResourceQuota != nil {
		if err := m.ResourceQuota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceQuota")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resource quota update calculation based on the context it is used
func (m *ResourceQuotaUpdateCalculation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCalculatedQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceQuotaUpdateCalculation) contextValidateCalculatedQuota(ctx context.Context, formats strfmt.Registry) error {

	if m.CalculatedQuota != nil {
		if err := m.CalculatedQuota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("calculatedQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("calculatedQuota")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceQuotaUpdateCalculation) contextValidateResourceQuota(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceQuota != nil {
		if err := m.ResourceQuota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceQuota")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceQuotaUpdateCalculation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceQuotaUpdateCalculation) UnmarshalBinary(b []byte) error {
	var res ResourceQuotaUpdateCalculation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
