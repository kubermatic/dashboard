// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubeVirtInfraStorageClass kube virt infra storage class
//
// swagger:model KubeVirtInfraStorageClass
type KubeVirtInfraStorageClass struct {

	// Optional: IsDefaultClass. If true, the created StorageClass in the tenant cluster will be annotated with:
	// storageclass.kubernetes.io/is-default-class : true
	// If missing or false, annotation will be:
	// storageclass.kubernetes.io/is-default-class : false
	IsDefaultClass bool `json:"isDefaultClass,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// volume binding mode
	VolumeBindingMode VolumeBindingMode `json:"volumeBindingMode,omitempty"`
}

// Validate validates this kube virt infra storage class
func (m *KubeVirtInfraStorageClass) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVolumeBindingMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubeVirtInfraStorageClass) validateVolumeBindingMode(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeBindingMode) { // not required
		return nil
	}

	if err := m.VolumeBindingMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("volumeBindingMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("volumeBindingMode")
		}
		return err
	}

	return nil
}

// ContextValidate validate this kube virt infra storage class based on the context it is used
func (m *KubeVirtInfraStorageClass) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVolumeBindingMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubeVirtInfraStorageClass) contextValidateVolumeBindingMode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VolumeBindingMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("volumeBindingMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("volumeBindingMode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubeVirtInfraStorageClass) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubeVirtInfraStorageClass) UnmarshalBinary(b []byte) error {
	var res KubeVirtInfraStorageClass
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
