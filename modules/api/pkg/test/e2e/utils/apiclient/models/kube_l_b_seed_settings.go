// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubeLBSeedSettings kube l b seed settings
//
// swagger:model KubeLBSeedSettings
type KubeLBSeedSettings struct {

	// EnableForAllDatacenters is used to enable kubeLB for all the datacenters belonging to this seed.
	// This is only used to control whether installing kubeLB is allowed or not for the datacenter.
	EnableForAllDatacenters bool `json:"enableForAllDatacenters,omitempty"`

	// kubeconfig
	Kubeconfig *ObjectReference `json:"kubeconfig,omitempty"`
}

// Validate validates this kube l b seed settings
func (m *KubeLBSeedSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubeconfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubeLBSeedSettings) validateKubeconfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Kubeconfig) { // not required
		return nil
	}

	if m.Kubeconfig != nil {
		if err := m.Kubeconfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubeconfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubeconfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kube l b seed settings based on the context it is used
func (m *KubeLBSeedSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKubeconfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubeLBSeedSettings) contextValidateKubeconfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Kubeconfig != nil {
		if err := m.Kubeconfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubeconfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubeconfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubeLBSeedSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubeLBSeedSettings) UnmarshalBinary(b []byte) error {
	var res KubeLBSeedSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
