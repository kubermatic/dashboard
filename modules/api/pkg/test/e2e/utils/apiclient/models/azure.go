// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Azure azure
//
// swagger:model Azure
type Azure struct {

	// The service principal used to access Azure.
	ClientID string `json:"clientID,omitempty"`

	// The client secret corresponding to the given service principal.
	ClientSecret string `json:"clientSecret,omitempty"`

	// If datacenter is set, this preset is only applicable to the
	// configured datacenter.
	Datacenter string `json:"datacenter,omitempty"`

	// Only enabled presets will be available in the KKP dashboard.
	Enabled bool `json:"enabled,omitempty"`

	// The resource group that will be used to look up and create resources for the cluster in.
	// If set to empty string at cluster creation, a new resource group will be created and this field will be updated to
	// the generated resource group's name.
	ResourceGroup string `json:"resourceGroup,omitempty"`

	// The name of a route table associated with the subnet referenced by `subnet`.
	// If set to empty string at cluster creation, a new route table will be created and this field will be updated to
	// the generated route table's name. If no subnet is defined at cluster creation, this field should be empty as well.
	RouteTableName string `json:"routeTable,omitempty"`

	// The name of a security group associated with the subnet referenced by `subnet`.
	// If set to empty string at cluster creation, a new security group will be created and this field will be updated to
	// the generated security group's name. If no subnet is defined at cluster creation, this field should be empty as well.
	SecurityGroup string `json:"securityGroup,omitempty"`

	// The name of a subnet in the VNet referenced by `vnet`.
	// If set to empty string at cluster creation, a new subnet will be created and this field will be updated to
	// the generated subnet's name. If no VNet is defined at cluster creation, this field should be empty as well.
	SubnetName string `json:"subnet,omitempty"`

	// The Azure Subscription used for the user cluster.
	SubscriptionID string `json:"subscriptionID,omitempty"`

	// The Azure Active Directory Tenant used for the user cluster.
	TenantID string `json:"tenantID,omitempty"`

	// The name of the VNet resource used for setting up networking in.
	// If set to empty string at cluster creation, a new VNet will be created and this field will be updated to
	// the generated VNet's name.
	VNetName string `json:"vnet,omitempty"`

	// Optional: Defines a second resource group that will be used for VNet related resources instead.
	// If left empty, NO additional resource group will be created and all VNet related resources use the resource group defined by `resourceGroup`.
	VNetResourceGroup string `json:"vnetResourceGroup,omitempty"`

	// load balancer s k u
	LoadBalancerSKU LBSKU `json:"loadBalancerSKU,omitempty"`
}

// Validate validates this azure
func (m *Azure) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoadBalancerSKU(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Azure) validateLoadBalancerSKU(formats strfmt.Registry) error {
	if swag.IsZero(m.LoadBalancerSKU) { // not required
		return nil
	}

	if err := m.LoadBalancerSKU.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("loadBalancerSKU")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("loadBalancerSKU")
		}
		return err
	}

	return nil
}

// ContextValidate validate this azure based on the context it is used
func (m *Azure) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLoadBalancerSKU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Azure) contextValidateLoadBalancerSKU(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LoadBalancerSKU.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("loadBalancerSKU")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("loadBalancerSKU")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Azure) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Azure) UnmarshalBinary(b []byte) error {
	var res Azure
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
