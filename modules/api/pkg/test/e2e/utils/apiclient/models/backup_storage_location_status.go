// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupStorageLocationStatus BackupStorageLocationStatus defines the observed state of BackupStorageLocation
//
// swagger:model BackupStorageLocationStatus
type BackupStorageLocationStatus struct {

	// LastSyncedTime is the last time the contents of the location were synced into
	// the cluster.
	// +optional
	// +nullable
	LastSyncedTime string `json:"lastSyncedTime,omitempty"`

	// LastValidationTime is the last time the backup store location was validated
	// the cluster.
	// +optional
	// +nullable
	LastValidationTime string `json:"lastValidationTime,omitempty"`

	// Message is a message about the backup storage location's status.
	// +optional
	Message string `json:"message,omitempty"`

	// access mode
	AccessMode BackupStorageLocationAccessMode `json:"accessMode,omitempty"`

	// last synced revision
	LastSyncedRevision UID `json:"lastSyncedRevision,omitempty"`

	// phase
	Phase BackupStorageLocationPhase `json:"phase,omitempty"`
}

// Validate validates this backup storage location status
func (m *BackupStorageLocationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSyncedRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStorageLocationStatus) validateAccessMode(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessMode) { // not required
		return nil
	}

	if err := m.AccessMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accessMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accessMode")
		}
		return err
	}

	return nil
}

func (m *BackupStorageLocationStatus) validateLastSyncedRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.LastSyncedRevision) { // not required
		return nil
	}

	if err := m.LastSyncedRevision.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastSyncedRevision")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastSyncedRevision")
		}
		return err
	}

	return nil
}

func (m *BackupStorageLocationStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if err := m.Phase.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("phase")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("phase")
		}
		return err
	}

	return nil
}

// ContextValidate validate this backup storage location status based on the context it is used
func (m *BackupStorageLocationStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastSyncedRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStorageLocationStatus) contextValidateAccessMode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AccessMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accessMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accessMode")
		}
		return err
	}

	return nil
}

func (m *BackupStorageLocationStatus) contextValidateLastSyncedRevision(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LastSyncedRevision.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastSyncedRevision")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastSyncedRevision")
		}
		return err
	}

	return nil
}

func (m *BackupStorageLocationStatus) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Phase.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("phase")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("phase")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupStorageLocationStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStorageLocationStatus) UnmarshalBinary(b []byte) error {
	var res BackupStorageLocationStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
