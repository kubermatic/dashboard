// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupStorageLocationSpec BackupStorageLocationSpec defines the desired state of a Velero BackupStorageLocation
//
// swagger:model BackupStorageLocationSpec
type BackupStorageLocationSpec struct {

	// Config is for provider-specific configuration fields.
	// +optional
	Config map[string]string `json:"config,omitempty"`

	// Default indicates this location is the default backup storage location.
	// +optional
	Default bool `json:"default,omitempty"`

	// Provider is the provider of the backup storage.
	Provider string `json:"provider,omitempty"`

	// access mode
	AccessMode BackupStorageLocationAccessMode `json:"accessMode,omitempty"`

	// backup sync period
	BackupSyncPeriod Duration `json:"backupSyncPeriod,omitempty"`

	// credential
	Credential *SecretKeySelector `json:"credential,omitempty"`

	// object storage
	ObjectStorage *ObjectStorageLocation `json:"objectStorage,omitempty"`

	// validation frequency
	ValidationFrequency Duration `json:"validationFrequency,omitempty"`
}

// Validate validates this backup storage location spec
func (m *BackupStorageLocationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectStorage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStorageLocationSpec) validateAccessMode(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessMode) { // not required
		return nil
	}

	if err := m.AccessMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accessMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accessMode")
		}
		return err
	}

	return nil
}

func (m *BackupStorageLocationSpec) validateCredential(formats strfmt.Registry) error {
	if swag.IsZero(m.Credential) { // not required
		return nil
	}

	if m.Credential != nil {
		if err := m.Credential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStorageLocationSpec) validateObjectStorage(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectStorage) { // not required
		return nil
	}

	if m.ObjectStorage != nil {
		if err := m.ObjectStorage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectStorage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectStorage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup storage location spec based on the context it is used
func (m *BackupStorageLocationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredential(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectStorage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStorageLocationSpec) contextValidateAccessMode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AccessMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accessMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accessMode")
		}
		return err
	}

	return nil
}

func (m *BackupStorageLocationSpec) contextValidateCredential(ctx context.Context, formats strfmt.Registry) error {

	if m.Credential != nil {
		if err := m.Credential.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStorageLocationSpec) contextValidateObjectStorage(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectStorage != nil {
		if err := m.ObjectStorage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectStorage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectStorage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupStorageLocationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStorageLocationSpec) UnmarshalBinary(b []byte) error {
	var res BackupStorageLocationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
