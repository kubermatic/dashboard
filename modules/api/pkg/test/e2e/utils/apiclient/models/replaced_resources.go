// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReplacedResources ReplacedResources is used to subtract replaced resources in the calculation. For instance, when user is changing instance type of an existing Machine Deployment, resources of an old instance type need to be subtracted.
//
// swagger:model ReplacedResources
type ReplacedResources struct {

	// DiskSizeGB will be processed only for those providers which don't have the disk size in their API objects, like AWS, Alibabla and GCP.
	DiskSizeGB int64 `json:"diskSizeGB,omitempty"`

	// replicas
	Replicas int64 `json:"replicas,omitempty"`

	// alibaba instance type
	AlibabaInstanceType *AlibabaInstanceType `json:"alibabaInstanceType,omitempty"`

	// anexia node spec
	AnexiaNodeSpec *AnexiaNodeSpec `json:"anexiaNodeSpec,omitempty"`

	// aws size
	AwsSize *AWSSize `json:"awsSize,omitempty"`

	// azure size
	AzureSize *AzureSize `json:"azureSize,omitempty"`

	// do size
	DoSize *DigitaloceanSize `json:"doSize,omitempty"`

	// equinix size
	EquinixSize *PacketSize `json:"equinixSize,omitempty"`

	// gcp size
	GcpSize *GCPMachineSize `json:"gcpSize,omitempty"`

	// hetzner size
	HetznerSize *HetznerSize `json:"hetznerSize,omitempty"`

	// kubevirt node size
	KubevirtNodeSize *KubevirtNodeSize `json:"kubevirtNodeSize,omitempty"`

	// nutanix node spec
	NutanixNodeSpec *NutanixNodeSpec `json:"nutanixNodeSpec,omitempty"`

	// openstack size
	OpenstackSize *OpenstackSize `json:"openstackSize,omitempty"`

	// v sphere node spec
	VSphereNodeSpec *VSphereNodeSpec `json:"vSphereNodeSpec,omitempty"`

	// vm director node spec
	VMDirectorNodeSpec *VMwareCloudDirectorNodeSpec `json:"vmDirectorNodeSpec,omitempty"`
}

// Validate validates this replaced resources
func (m *ReplacedResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlibabaInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnexiaNodeSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquinixSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHetznerSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubevirtNodeSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNutanixNodeSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenstackSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVSphereNodeSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMDirectorNodeSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplacedResources) validateAlibabaInstanceType(formats strfmt.Registry) error {
	if swag.IsZero(m.AlibabaInstanceType) { // not required
		return nil
	}

	if m.AlibabaInstanceType != nil {
		if err := m.AlibabaInstanceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alibabaInstanceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alibabaInstanceType")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) validateAnexiaNodeSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.AnexiaNodeSpec) { // not required
		return nil
	}

	if m.AnexiaNodeSpec != nil {
		if err := m.AnexiaNodeSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("anexiaNodeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("anexiaNodeSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) validateAwsSize(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsSize) { // not required
		return nil
	}

	if m.AwsSize != nil {
		if err := m.AwsSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) validateAzureSize(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureSize) { // not required
		return nil
	}

	if m.AzureSize != nil {
		if err := m.AzureSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) validateDoSize(formats strfmt.Registry) error {
	if swag.IsZero(m.DoSize) { // not required
		return nil
	}

	if m.DoSize != nil {
		if err := m.DoSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("doSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("doSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) validateEquinixSize(formats strfmt.Registry) error {
	if swag.IsZero(m.EquinixSize) { // not required
		return nil
	}

	if m.EquinixSize != nil {
		if err := m.EquinixSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("equinixSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("equinixSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) validateGcpSize(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpSize) { // not required
		return nil
	}

	if m.GcpSize != nil {
		if err := m.GcpSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) validateHetznerSize(formats strfmt.Registry) error {
	if swag.IsZero(m.HetznerSize) { // not required
		return nil
	}

	if m.HetznerSize != nil {
		if err := m.HetznerSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hetznerSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hetznerSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) validateKubevirtNodeSize(formats strfmt.Registry) error {
	if swag.IsZero(m.KubevirtNodeSize) { // not required
		return nil
	}

	if m.KubevirtNodeSize != nil {
		if err := m.KubevirtNodeSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubevirtNodeSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubevirtNodeSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) validateNutanixNodeSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.NutanixNodeSpec) { // not required
		return nil
	}

	if m.NutanixNodeSpec != nil {
		if err := m.NutanixNodeSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nutanixNodeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nutanixNodeSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) validateOpenstackSize(formats strfmt.Registry) error {
	if swag.IsZero(m.OpenstackSize) { // not required
		return nil
	}

	if m.OpenstackSize != nil {
		if err := m.OpenstackSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openstackSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("openstackSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) validateVSphereNodeSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.VSphereNodeSpec) { // not required
		return nil
	}

	if m.VSphereNodeSpec != nil {
		if err := m.VSphereNodeSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vSphereNodeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vSphereNodeSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) validateVMDirectorNodeSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.VMDirectorNodeSpec) { // not required
		return nil
	}

	if m.VMDirectorNodeSpec != nil {
		if err := m.VMDirectorNodeSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmDirectorNodeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmDirectorNodeSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this replaced resources based on the context it is used
func (m *ReplacedResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlibabaInstanceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAnexiaNodeSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDoSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEquinixSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHetznerSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubevirtNodeSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNutanixNodeSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpenstackSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVSphereNodeSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMDirectorNodeSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplacedResources) contextValidateAlibabaInstanceType(ctx context.Context, formats strfmt.Registry) error {

	if m.AlibabaInstanceType != nil {
		if err := m.AlibabaInstanceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alibabaInstanceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alibabaInstanceType")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) contextValidateAnexiaNodeSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.AnexiaNodeSpec != nil {
		if err := m.AnexiaNodeSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("anexiaNodeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("anexiaNodeSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) contextValidateAwsSize(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsSize != nil {
		if err := m.AwsSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) contextValidateAzureSize(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureSize != nil {
		if err := m.AzureSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) contextValidateDoSize(ctx context.Context, formats strfmt.Registry) error {

	if m.DoSize != nil {
		if err := m.DoSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("doSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("doSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) contextValidateEquinixSize(ctx context.Context, formats strfmt.Registry) error {

	if m.EquinixSize != nil {
		if err := m.EquinixSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("equinixSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("equinixSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) contextValidateGcpSize(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpSize != nil {
		if err := m.GcpSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) contextValidateHetznerSize(ctx context.Context, formats strfmt.Registry) error {

	if m.HetznerSize != nil {
		if err := m.HetznerSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hetznerSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hetznerSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) contextValidateKubevirtNodeSize(ctx context.Context, formats strfmt.Registry) error {

	if m.KubevirtNodeSize != nil {
		if err := m.KubevirtNodeSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubevirtNodeSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubevirtNodeSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) contextValidateNutanixNodeSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.NutanixNodeSpec != nil {
		if err := m.NutanixNodeSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nutanixNodeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nutanixNodeSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) contextValidateOpenstackSize(ctx context.Context, formats strfmt.Registry) error {

	if m.OpenstackSize != nil {
		if err := m.OpenstackSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openstackSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("openstackSize")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) contextValidateVSphereNodeSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.VSphereNodeSpec != nil {
		if err := m.VSphereNodeSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vSphereNodeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vSphereNodeSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ReplacedResources) contextValidateVMDirectorNodeSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.VMDirectorNodeSpec != nil {
		if err := m.VMDirectorNodeSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmDirectorNodeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmDirectorNodeSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplacedResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplacedResources) UnmarshalBinary(b []byte) error {
	var res ReplacedResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
