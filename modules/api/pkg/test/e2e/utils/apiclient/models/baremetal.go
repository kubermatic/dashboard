// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Baremetal baremetal
//
// swagger:model Baremetal
type Baremetal struct {

	// If datacenter is set, this preset is only applicable to the
	// configured datacenter.
	Datacenter string `json:"datacenter,omitempty"`

	// Only enabled presets will be available in the KKP dashboard.
	Enabled bool `json:"enabled,omitempty"`

	// IsCustomizable marks a preset as editable on the KKP UI; Customizable presets still have the credentials obscured on the UI, but other fields that are not considered private are displayed during cluster creation. Users can then update those fields, if required.
	// NOTE: This is only supported for OpenStack Cloud Provider in KKP 2.26. Support for other providers will be added later on.
	IsCustomizable bool `json:"isCustomizable,omitempty"`

	// tinkerbell
	Tinkerbell *Tinkerbell `json:"tinkerbell,omitempty"`
}

// Validate validates this baremetal
func (m *Baremetal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTinkerbell(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Baremetal) validateTinkerbell(formats strfmt.Registry) error {
	if swag.IsZero(m.Tinkerbell) { // not required
		return nil
	}

	if m.Tinkerbell != nil {
		if err := m.Tinkerbell.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tinkerbell")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tinkerbell")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this baremetal based on the context it is used
func (m *Baremetal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTinkerbell(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Baremetal) contextValidateTinkerbell(ctx context.Context, formats strfmt.Registry) error {

	if m.Tinkerbell != nil {
		if err := m.Tinkerbell.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tinkerbell")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tinkerbell")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Baremetal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Baremetal) UnmarshalBinary(b []byte) error {
	var res Baremetal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
