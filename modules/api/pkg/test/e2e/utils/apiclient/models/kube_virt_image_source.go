// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubeVirtImageSource KubeVirtImageSource represents a KubeVirt image source type.
//
// swagger:model KubeVirtImageSource
type KubeVirtImageSource string

// Validate validates this kube virt image source
func (m KubeVirtImageSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStandard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubeVirtImageSource) validateStandard(formats strfmt.Registry) error {
	if swag.IsZero(m.Standard) { // not required
		return nil
	}

	if m.Standard != nil {
		if err := m.Standard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standard")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kube virt image source based on the context it is used
func (m KubeVirtImageSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStandard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubeVirtImageSource) contextValidateStandard(ctx context.Context, formats strfmt.Registry) error {

	if m.Standard != nil {
		if err := m.Standard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standard")
			}
			return err
		}
	}

	return nil
}
