// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TinkerbellNodeSpec TinkerbellNodeSpec tinkerbell specific node settings
//
// swagger:model TinkerbellNodeSpec
type TinkerbellNodeSpec struct {

	// OsImageUrl is the link for Operating System.
	OsImageURL string `json:"osImageUrl,omitempty"`

	// hardware ref
	HardwareRef *NamespacedName `json:"hardwareRef,omitempty"`
}

// Validate validates this tinkerbell node spec
func (m *TinkerbellNodeSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHardwareRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TinkerbellNodeSpec) validateHardwareRef(formats strfmt.Registry) error {
	if swag.IsZero(m.HardwareRef) { // not required
		return nil
	}

	if m.HardwareRef != nil {
		if err := m.HardwareRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardwareRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hardwareRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tinkerbell node spec based on the context it is used
func (m *TinkerbellNodeSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHardwareRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TinkerbellNodeSpec) contextValidateHardwareRef(ctx context.Context, formats strfmt.Registry) error {

	if m.HardwareRef != nil {
		if err := m.HardwareRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardwareRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hardwareRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TinkerbellNodeSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TinkerbellNodeSpec) UnmarshalBinary(b []byte) error {
	var res TinkerbellNodeSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
