// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubeLBDatacenterSettings kube l b datacenter settings
//
// swagger:model KubeLBDatacenterSettings
type KubeLBDatacenterSettings struct {

	// Enabled is used to enable/disable kubeLB for the datacenter. This is used to control whether installing kubeLB is allowed or not for the datacenter.
	Enabled bool `json:"enabled,omitempty"`

	// Enforced is used to enforce kubeLB installation for all the user clusters belonging to this datacenter. Setting enforced to false will not uninstall kubeLB from the user clusters and it needs to be disabled manually.
	Enforced bool `json:"enforced,omitempty"`

	// NodeAddressType is used to configure the address type from node, used for load balancing.
	// Optional: Defaults to ExternalIP.
	// +kubebuilder:validation:Enum=InternalIP;ExternalIP
	// +kubebuilder:default=ExternalIP
	NodeAddressType string `json:"nodeAddressType,omitempty"`

	// kubeconfig
	Kubeconfig *ObjectReference `json:"kubeconfig,omitempty"`
}

// Validate validates this kube l b datacenter settings
func (m *KubeLBDatacenterSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubeconfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubeLBDatacenterSettings) validateKubeconfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Kubeconfig) { // not required
		return nil
	}

	if m.Kubeconfig != nil {
		if err := m.Kubeconfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubeconfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubeconfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kube l b datacenter settings based on the context it is used
func (m *KubeLBDatacenterSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKubeconfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubeLBDatacenterSettings) contextValidateKubeconfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Kubeconfig != nil {
		if err := m.Kubeconfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubeconfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubeconfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubeLBDatacenterSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubeLBDatacenterSettings) UnmarshalBinary(b []byte) error {
	var res KubeLBDatacenterSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
