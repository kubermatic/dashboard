// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KubevirtNodeSize kubevirt node size
//
// swagger:model KubevirtNodeSize
type KubevirtNodeSize struct {

	// CPUs states how many cpus the kubevirt node will have.
	// Required: true
	CPUs *string `json:"cpus"`

	// Memory states the memory that kubevirt node will have. The value should be in the
	// format of https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/
	// Required: true
	Memory *string `json:"memory"`

	// PrimaryDiskSize states the size of the provisioned pvc per node.
	// Required: true
	PrimaryDiskSize *string `json:"primaryDiskSize"`

	// SecondaryDisks contains list of secondary-disks
	SecondaryDisks []*SecondaryDisks `json:"secondaryDisks"`
}

// Validate validates this kubevirt node size
func (m *KubevirtNodeSize) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryDiskSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryDisks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubevirtNodeSize) validateCPUs(formats strfmt.Registry) error {

	if err := validate.Required("cpus", "body", m.CPUs); err != nil {
		return err
	}

	return nil
}

func (m *KubevirtNodeSize) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	return nil
}

func (m *KubevirtNodeSize) validatePrimaryDiskSize(formats strfmt.Registry) error {

	if err := validate.Required("primaryDiskSize", "body", m.PrimaryDiskSize); err != nil {
		return err
	}

	return nil
}

func (m *KubevirtNodeSize) validateSecondaryDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryDisks) { // not required
		return nil
	}

	for i := 0; i < len(m.SecondaryDisks); i++ {
		if swag.IsZero(m.SecondaryDisks[i]) { // not required
			continue
		}

		if m.SecondaryDisks[i] != nil {
			if err := m.SecondaryDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondaryDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("secondaryDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this kubevirt node size based on the context it is used
func (m *KubevirtNodeSize) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecondaryDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubevirtNodeSize) contextValidateSecondaryDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecondaryDisks); i++ {

		if m.SecondaryDisks[i] != nil {
			if err := m.SecondaryDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondaryDisks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("secondaryDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubevirtNodeSize) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubevirtNodeSize) UnmarshalBinary(b []byte) error {
	var res KubevirtNodeSize
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
