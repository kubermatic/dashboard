// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LBClass l b class
//
// swagger:model LBClass
type LBClass struct {

	// FloatingNetworkID is the external network used to create floating IP for the load balancer VIP.
	FloatingNetworkID string `json:"floatingNetworkID,omitempty"`

	// FloatingSubnet is a name pattern for the external network subnet used to create floating IP for the load balancer VIP.
	FloatingSubnet string `json:"floatingSubnet,omitempty"`

	// FloatingSubnetID is the external network subnet used to create floating IP for the load balancer VIP.
	FloatingSubnetID string `json:"floatingSubnetID,omitempty"`

	// FloatingSubnetTags is a comma separated list of tags for the external network subnet used to create floating IP for the load balancer VIP.
	FloatingSubnetTags string `json:"floatingSubnetTags,omitempty"`

	// MemberSubnetID is the ID of the Neutron network on which to create the members of the load balancer.
	MemberSubnetID string `json:"memberSubnetID,omitempty"`

	// NetworkID is the ID of the Neutron network on which to create load balancer VIP, not needed if subnet-id is set.
	NetworkID string `json:"networkID,omitempty"`

	// SubnetID is the ID of the Neutron subnet on which to create load balancer VIP.
	SubnetID string `json:"subnetID,omitempty"`
}

// Validate validates this l b class
func (m *LBClass) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this l b class based on context it is used
func (m *LBClass) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LBClass) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LBClass) UnmarshalBinary(b []byte) error {
	var res LBClass
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
