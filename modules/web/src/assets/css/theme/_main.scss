// Copyright 2021 The Kubermatic Kubernetes Platform contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@use 'sass:color';
@use 'sass:map';
@use '@angular/material' as mat;
@import 'material/theme';
@import 'global/theme';
@import 'component';

// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-typography-config());`

/* TODO(mdc-migration): Remove all-legacy-component-typographies once all legacy components are migrated */
@include mat.all-legacy-component-typographies;
@include mat.all-component-typographies;

/* TODO(mdc-migration): Remove legacy-core once all legacy components are migrated */
@include mat.legacy-core;
@include mat.core;

@mixin theme($theme, $colors) {
  $palette-background: map.get($theme, background);
  $palette-foreground: map.get($theme, foreground);
  $theme-colors: (
    background-app-bar: mat.get-color-from-palette($palette-background, app-bar),
    background-card: mat.get-color-from-palette($palette-background, card),
    background-dialog: mat.get-color-from-palette($palette-background, dialog),
    background-disabled-button: mat.get-color-from-palette($palette-background, disabled-button),
    background-hover: mat.get-color-from-palette($palette-background, hover),
    background: mat.get-color-from-palette($palette-background, background),
    checkbox-disabled: mat.get-color-from-palette($palette-foreground, disabled-checkbox),
    checkbox-disabled-checked: mat.get-color-from-palette($palette-foreground, disabled-checkbox-checked),
    checkbox-disabled-border: mat.get-color-from-palette($palette-foreground, disabled-checkbox-border),
    divider-disabled: mat.get-color-from-palette($palette-foreground, disabled-divider),
    divider: mat.get-color-from-palette($palette-foreground, divider),
    project-switch: color.adjust(mat.get-color-from-palette($palette-foreground, secondary-text), $alpha: 0.7),
    text-disabled: mat.get-color-from-palette($palette-foreground, disabled-text),
    text-secondary: mat.get-color-from-palette($palette-foreground, secondary-text),
    text: mat.get-color-from-palette($palette-foreground, text),
  );

  // Create merged colors map from custom and theme colors
  // that can be accessed from components' theme files.
  $merged-colors: map.merge($colors, $theme-colors);

  // Override default material themes.
  @include theme-material($merged-colors);

  // Register global theming rules.
  @include theme-global($merged-colors);

  // Register component-level themes.
  @include theme-components($merged-colors);
}
