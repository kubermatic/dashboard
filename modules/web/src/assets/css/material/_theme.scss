// Copyright 2021 The Kubermatic Kubernetes Platform contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@use 'sass:map';

@mixin theme-material($colors) {
  // Cards.
  .mat-card {
    color: map.get($colors, text);
  }

  .mat-card-content {
    p {
      color: map.get($colors, text);
    }

    button {
      border: none;
      color: map.get($colors, primary);
    }
  }

  // Dialogs.
  .mat-mdc-dialog-container {
    --mdc-dialog-supporting-text-color: #{map.get($colors, text)};

    color: map.get($colors, text);
  }

  // Tables.
  .mat-table {
    .mat-header-cell,
    .mat-sort-header-button {
      color: map.get($colors, text);
    }

    td {
      &.mat-cell {
        border-top: 1px solid map.get($colors, divider);
      }
    }

    .mat-sort-header-arrow {
      .mat-sort-header-stem,
      .mat-sort-header-pointer-left,
      .mat-sort-header-pointer-right,
      .mat-sort-header-pointer-middle {
        background: none;
      }
    }

    [aria-sort='ascending'] {
      .mat-sort-header-arrow {
        .mat-sort-header-indicator {
          &::before {
            background-color: map.get($colors, text);
          }
        }
      }
    }

    [aria-sort='descending'] {
      .mat-sort-header-arrow {
        .mat-sort-header-indicator {
          &::before {
            background-color: map.get($colors, text);
          }
        }
      }
    }
  }

  .mat-paginator {
    .mat-paginator-range-actions > .mat-icon-button:not([disabled]) {
      color: map.get($colors, text-secondary);
    }
  }

  // Steppers.
  .mat-step-header {
    .mat-step-icon {
      background: map.get($colors, divider);
      color: map.get($colors, text-secondary);

      &.mat-step-icon-selected,
      &.mat-step-icon-state-edit {
        background: map.get($colors, wizard-step-background);
        color: map.get($colors, primary);
      }
    }

    .mat-step-label {
      color: map.get($colors, text-secondary);

      &.mat-step-label-active {
        color: map.get($colors, wizard-step-active);
      }

      &.mat-step-label-selected {
        color: map.get($colors, wizard-step-active);
      }
    }

    &.cdk-program-focused {
      background-color: unset;
    }
  }

  // Menus.
  .mat-drawer-container {
    background-color: map.get($colors, background);

    .mat-drawer-side {
      border: none;
    }
  }

  // Forms.
  mat-form-field {
    &.mat-form-field {
      color: map.get($colors, text);
    }

    &.mat-form-field-should-float:not(.mat-focused):not(.ng-invalid):not(.mat-form-field-disabled) {
      div.mat-form-field-flex:hover {
        label {
          color: map.get($colors, secondary-dark);
        }
      }
    }

    &.mat-focused {
      &:not(.ng-invalid),
      &.ng-pristine:not(.ng-touched) {
        label.mat-form-field-label {
          color: map.get($colors, primary-dark);
        }
      }
    }
  }

  .mat-form-field-appearance-outline {
    .mat-form-field-outline {
      color: map.get($colors, divider);
    }

    &.mat-focused {
      .mat-form-field-outline-thick {
        color: map.get($colors, primary);
      }
    }

    &.mat-form-field-disabled {
      .mat-form-field-outline {
        color: map.get($colors, divider-disabled);
      }
    }
  }

  .mat-form-field-empty.mat-form-field-label .mat-form-field-required-marker {
    color: map.get($colors, secondary);
  }

  div.mat-form-field-outline.mat-form-field-outline-thick {
    color: map.get($colors, secondary);
  }

  .mat-select-arrow {
    background-color: map.get($colors, text);
  }

  .mat-optgroup-label {
    background-color: map.get($colors, option-background);
  }

  .mat-option {
    background-color: map.get($colors, option-background);
    color: map.get($colors, text);

    &:hover {
      background-color: map.get($colors, option-background-hover);
    }
  }

  // Buttons, sliders and checkboxes.
  .mat-button,
  .mat-flat-button,
  .mat-raised-button {
    background-color: map.get($colors, primary);
    color: #fff;

    &:hover:not([disabled]) {
      background-color: map.get($colors, primary-hover);
    }

    .km-icon-mask {
      background-color: #fff;
    }

    &:disabled {
      .km-icon-mask {
        background-color: map.get($colors, text);
        opacity: 30%;
      }
    }

    &.mat-alternative:not([disabled]) {
      background-color: map.get($colors, secondary);

      &:hover {
        background-color: map.get($colors, secondary-hover);
      }
    }

    &.mat-tertiary:not([disabled]) {
      background-color: transparent;
      border: 1px solid map.get($colors, project-switch);
      color: map.get($colors, text-secondary);

      &:hover {
        background-color: map.get($colors, background-hover);
      }

      .km-icon-mask {
        background-color: map.get($colors, text-secondary);
      }
    }

    &.mat-quaternary:not([disabled]) {
      background-color: transparent;
      border: 1px solid map.get($colors, divider);
      color: map.get($colors, text);

      &:hover {
        background-color: map.get($colors, background-hover);
      }

      .km-icon-mask {
        background-color: map.get($colors, text);
      }
    }

    &.mat-pure:not([disabled]) {
      background-color: transparent;
      border: none;
      color: map.get($colors, text-secondary);

      &:hover {
        background-color: map.get($colors, background-hover);
      }

      .km-icon-mask {
        background-color: map.get($colors, text);
      }
    }
  }

  .mat-button-focus-overlay {
    background-color: transparent;
  }

  .mat-icon-button {
    .km-icon-mask {
      background-color: map.get($colors, text);
    }

    &:hover:not([disabled]) {
      background-color: map.get($colors, divider);
    }

    &:disabled i {
      background-color: map.get($colors, background-disabled-button);
    }

    &.mat-alternative:not([disabled]) {
      background-color: map.get($colors, secondary);

      &:hover {
        background-color: map.get($colors, secondary-hover);
      }

      i {
        background-color: #fff;
      }
    }

    &.mat-tertiary:not([disabled]) {
      background-color: transparent;
      border: 1px solid map.get($colors, divider);

      &:hover {
        background-color: map.get($colors, background-hover);
      }
    }
  }

  .mat-radio-button {
    &.mat-accent {
      .mat-radio-ripple {
        .mat-ripple-element {
          background-color: map.get($colors, primary);
        }
      }

      .mat-radio-inner-circle {
        background-color: map.get($colors, primary);
      }

      &.mat-radio-checked .mat-radio-outer-circle {
        border-color: map.get($colors, primary);
      }
    }
  }

  .mat-slide-toggle {
    .mat-slide-toggle-label {
      .mat-slide-toggle-bar {
        background-color: map.get($colors, divider);
      }
    }

    &.mat-checked {
      .mat-slide-toggle-bar {
        background-color: map.get($colors, primary);
      }

      .mat-slide-toggle-thumb {
        background-color: #fafafa;
      }
    }
  }

  .mat-button-toggle-group {
    background-color: transparent;

    .mat-button-toggle {
      border-color: map.get($colors, divider);

      &.mat-button-toggle-checked {
        background-color: transparent;
        border-color: map.get($colors, primary);
      }

      .mat-button-toggle-label-content {
        color: map.get($colors, text);
      }
    }
  }

  .mat-checkbox-checked .mat-checkbox-inner-container .mat-checkbox-background {
    background-color: map.get($colors, primary);
  }

  .mat-checkbox-disabled {
    &:not(.mat-checkbox-checked) {
      .mat-checkbox-inner-container .mat-checkbox-frame {
        background-color: map.get($colors, checkbox-disabled);
        border-color: map.get($colors, checkbox-disabled-border);
      }
    }

    &.mat-checkbox-checked {
      .mat-checkbox-inner-container .mat-checkbox-background {
        background-color: map.get($colors, checkbox-disabled-checked);
      }
    }

    .mat-checkbox-label {
      color: map.get($colors, text-secondary);
    }
  }

  .mat-checkbox-frame {
    border: 2px solid map.get($colors, divider);
  }

  // Chips.
  .mat-chip {
    &.mat-standard-chip {
      background: transparent;
      border: 1px solid map.get($colors, divider);
      color: map.get($colors, text);

      &::after {
        background: transparent;
      }

      div:not(.mat-chip-ripple) {
        background: map.get($colors, divider);
      }

      div.km-chip-accent {
        background: transparent;
      }

      .mat-chip-remove {
        background-color: map.get($colors, text);
      }
    }
  }

  // Tooltips.
  .mat-tooltip {
    background-color: map.get($colors, tooltip-background);
  }

  // Spinners.
  .mat-mdc-progress-spinner circle,
  .mat-mdc-spinner circle {
    stroke: map.get($colors, primary-hover);
  }

  // Tab group.
  .mat-tab-group {
    .mat-tab-header {
      border-bottom: 1px solid map.get($colors, tab-divider);
    }
  }

  // Snackbar
  .mat-mdc-snack-bar-container {
    --mdc-snackbar-container-color: #{map.get($colors, option-background)};
  }

  // Progress bar
  .mat-mdc-progress-bar, .mat-mdc-progress-bar.mat-accent {
    /* stylelint-disable-next-line selector-class-pattern */
    .mdc-linear-progress__buffer-bar, .mdc-linear-progress__buffer-dots {
      background-color: map.get($colors, divider);
      transition: none;
    }

    /* stylelint-disable-next-line selector-class-pattern */
    .mdc-linear-progress__buffer-dots {
      background-image: none;
      /* stylelint-disable-next-line property-no-vendor-prefix */
      -webkit-mask-image: none; // required for chrome
      mask-image: none;
    }
  }

  .mat-mdc-progress-bar.mat-accent {
    --mdc-linear-progress-active-indicator-color: #{map.get($colors, indicator-orange)};
  }
}
